{"version":3,"sources":["gl/Shader.js","gl/VertexBuffer.js","gl/Uniform.js","gl/IndexBuffer.js","shaders/basic.js","gl/Renderer.js","gl/Texture2D.js","gl/FrameBuffer.js","app/GridRender.js","hashlife/QuadTreeSimulated.js","hashlife/QuadTree.js","hashlife/HashLife.js","hashlife/Simulation.js","app/App.js","AppView.js","index.js"],"names":["Shader","gl","vertex_shader_src","fragment_shader_src","this","create_shader_program","uniforms","locations","vertex_shader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","prepend_line_numbers","Error","fragment_shader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","create_program","name","uniform","location","getUniformLocation","push","useProgram","i","length","apply","src","split","map","v","join","VertexBufferObject","data","usage","vbo","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","VertexArrayObject","vao","createVertexArray","integer_types","Set","INT","UNSIGNED_INT","layout","bind","offset","attributes","attribute","enableVertexAttribArray","index","has","type","vertexAttribIPointer","count","is_normalised","stride","vertexAttribPointer","size","bindVertexArray","VertexBufferLayout","sizeof","VertexBufferAttribute","start","end","slice","FLOAT","Uniform","callback","IndexBuffer","buffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","Renderer","clear_colour","Float32Array","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertex_array","index_buffer","shader","drawElements","TRIANGLES","Texture2D","shape","texture","createTexture","texParameteri","TEXTURE_2D","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","pixelStorei","UNPACK_ALIGNMENT","texImage2D","R8","RED","UNSIGNED_BYTE","bindTexture","slot","activeTexture","TEXTURE0","FrameBuffer","fb","createFramebuffer","texture2D","framebufferTexture2D","FRAMEBUFFER","COLOR_ATTACHMENT0","unbind","bindFramebuffer","GridRender","data_texture","frame_buffer","attach_texture2D","texSubImage2D","active","QuadTreeSimulated","nw","ne","sw","se","result","west","east","create","north","south","population","level","slow_simulation","n00","get_next_generation","n01","create_horizontal","n02","n10","create_vertical","n11","create_center","n12","n20","n21","n22","bits","x","y","get","one_generation","self","neighbours","undefined","QuadTreeNode","alive","n","create_tree","set","HashMap","key","item","entries","entry","equals","HashLifeNode","address","generate_id","node","put_default_node","id","CurrentID","hash_code","stored","HashedNodes","put","Simulation","initial_level","root","bootstrap","construct_buffer","current_level","dim","Uint8Array","Math","random","wrapped_step","expanding_step","update_buffer","expand","orig","center","horizontal","vertical","corner","draw_recursive","xoff","yoff","quad","vertex_data","index_data","Uint32Array","App","renderer","basic_shader","add_uniform","loc","uniform1i","ibo","push_attribute","add_vertex_buffer","sim","randomise","grid","steps","requestAnimationFrame","loop","on_update","on_render","running","step","refresh","draw","AppView","props","ref","createRef","state","failed_webgl","current","getContext","app","run","setState","onClick","ev","toggle","width","height","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13ead0fd.chunk.js","sourcesContent":["export class Shader {\r\n  constructor(gl, vertex_shader_src, fragment_shader_src) {\r\n    this.gl = gl;\r\n    this.create_shader_program(vertex_shader_src, fragment_shader_src);\r\n    this.uniforms = []; \r\n    this.locations = [];\r\n  }\r\n\r\n  create_shader_program(vertex_shader_src, fragment_shader_src) {\r\n    [this.vertex_shader, this.fragment_shader, this.program] = create_program(this.gl, vertex_shader_src, fragment_shader_src); \r\n  }\r\n\r\n  // add to list of uniforms permanently binded to shader\r\n  add_uniform(name, uniform) {\r\n    let gl = this.gl;\r\n    let location = gl.getUniformLocation(this.program, name);\r\n    if (location === null) {\r\n      // console.warn(`Couldn't find location of uniform ${name}`);\r\n      // throw new Error(`Couldn't find location of uniform ${name}`);\r\n    } \r\n    this.uniforms.push(uniform);\r\n    this.locations.push(location);\r\n  }\r\n\r\n  // dynamic sub in uniform\r\n  // apply_uniform(name, uniform) {\r\n  //   let gl = this.gl;\r\n  //   this.bind();\r\n  //   let location = gl.getUniformLocation(this.program, name);\r\n  //   uniform.apply(location);\r\n  // }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.useProgram(this.program);\r\n    for (let i = 0; i < this.uniforms.length; i++) {\r\n      let uniform = this.uniforms[i];\r\n      let location = this.locations[i];\r\n      if (location === null) {\r\n        continue;\r\n      }\r\n      uniform.apply(location);\r\n    }\r\n  }\r\n}\r\n\r\nfunction create_program(gl, vertex_shader_src, fragment_shader_src) {\r\n  const vertex_shader = gl.createShader(gl.VERTEX_SHADER);\r\n  gl.shaderSource(vertex_shader, vertex_shader_src);\r\n  gl.compileShader(vertex_shader);\r\n  if (!gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(vertex_shader));\r\n    console.error(prepend_line_numbers(vertex_shader_src));\r\n    throw new Error('Unable to compile vertex shader');\r\n  }\r\n\r\n  const fragment_shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n  gl.shaderSource(fragment_shader, fragment_shader_src);\r\n  gl.compileShader(fragment_shader);\r\n  if (!gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(fragment_shader));\r\n    throw new Error('Unable to compile fragment shader');\r\n  }\r\n\r\n  const program = gl.createProgram();\r\n  gl.attachShader(program, vertex_shader);\r\n  gl.attachShader(program, fragment_shader);\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    console.error(gl.getProgramInfoLog(program));\r\n    console.error(prepend_line_numbers(fragment_shader_src));\r\n    throw new Error('Unable to construct shader program');\r\n  }\r\n\r\n  return [vertex_shader, fragment_shader, program];\r\n}\r\n\r\nfunction prepend_line_numbers(src) {\r\n  let lines = src.split('\\n').map((v, i) => `${i+1}\\t| ${v}`);\r\n  let out = lines.join('\\n');\r\n  return out;\r\n}","// 1D array containing n elements\r\n// can contain arbitary data\r\nexport class VertexBufferObject {\r\n  constructor(gl, data, usage) {\r\n    this.gl = gl;\r\n\r\n    this.data = data;\r\n\r\n    this.vbo = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n    gl.bufferData(gl.ARRAY_BUFFER, data, usage);\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n  }\r\n}\r\n\r\nexport class VertexArrayObject {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.vao = gl.createVertexArray();\r\n    this.integer_types = new Set([gl.INT, gl.UNSIGNED_INT]);\r\n  }\r\n\r\n  add_vertex_buffer(vbo, layout) {\r\n    let gl = this.gl;\r\n\r\n    this.bind();\r\n    vbo.bind();\r\n\r\n    let offset = 0;\r\n    for (let attribute of layout.attributes) {\r\n      gl.enableVertexAttribArray(attribute.index);\r\n      if (this.integer_types.has(attribute.type)) {\r\n        gl.vertexAttribIPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      } else {\r\n        gl.vertexAttribPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      }\r\n      offset += attribute.count * attribute.size;\r\n    }\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindVertexArray(this.vao);\r\n  }\r\n}\r\n\r\nexport class VertexBufferLayout {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.stride = 0;\r\n    this.attributes = [];\r\n  }\r\n\r\n  push_attribute(index, count, type, is_normalised) {\r\n    let size = this.sizeof(type);\r\n    let attribute = new VertexBufferAttribute(index, count, type, is_normalised, size);\r\n    this.attributes.push(attribute);\r\n    this.stride += count * size;\r\n  }\r\n\r\n  slice(start, end) {\r\n    let layout = new VertexBufferLayout();\r\n    layout.stride = this.stride;\r\n    layout.attributes = this.attributes.slice(start, end);\r\n    return layout;\r\n  }\r\n\r\n  sizeof(type) {\r\n    let gl = this.gl;\r\n\r\n    switch (type) {\r\n    case gl.FLOAT: return 4;\r\n    case gl.UNSIGNED_INT: return 4;\r\n    case gl.INT: return 4;\r\n    default: throw new Error(`Unknown element type: ${type}`);\r\n    }\r\n  }\r\n}\r\n\r\n// each element in the shader has an attribute index\r\n// layout(location = <attribute_index>) in vec3 position;\r\n// layout(locaiton = <attribute_index>) in vec3 normal;\r\nclass VertexBufferAttribute {\r\n  constructor(index, count, type, is_normalised, size) {\r\n    this.index = index;\r\n    this.count = count;\r\n    this.type = type;\r\n    this.is_normalised = is_normalised;\r\n    this.size = size;\r\n  }\r\n\r\n  \r\n}","export class UniformMat4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n       this.gl.uniformMatrix4fv(location, false, this.data);\r\n    }\r\n}\r\n\r\nexport class UniformVec3f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform3f(location, this.data[0], this.data[1], this.data[2]);\r\n    }\r\n}\r\n\r\nexport class UniformVec4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform4f(location, this.data[0], this.data[1], this.data[2], this.data[3]);\r\n    }\r\n}\r\n\r\nexport class Uniform {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    apply(location) {\r\n        this.callback(location);\r\n    }\r\n}","export class IndexBuffer {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n\r\n        this.buffer = gl.createBuffer();\r\n        this.count = data.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer); \r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW); // gluint is 4 bytes\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);\r\n    }\r\n}","const vertex = \r\n`#version 300 es\r\nprecision mediump float;\r\n\r\nin vec2 position;\r\n\r\nout vec2 vPosition;\r\n\r\nvoid main() {\r\n    vPosition = (position + vec2(1,1))/2.0;\r\n    gl_Position = vec4(position.x, position.y, 0.0, 1.0);\r\n}`;\r\n\r\nconst frag = \r\n`#version 300 es\r\nprecision mediump float;\r\nprecision highp sampler2D;\r\n\r\nin vec2 vPosition;\r\n\r\nout vec4 FragColour;\r\n\r\nuniform sampler2D uDataTexture;\r\n\r\nvoid main() {\r\n    vec4 cell = texture(uDataTexture, vPosition);\r\n    float state = cell[0];\r\n    FragColour = vec4(state, state, state, 1.0);\r\n    // FragColour = vec4(vPosition.x, vPosition.y, 1.0, 1.0);\r\n}`;\r\n\r\nexport default {vertex: vertex, frag: frag};","export class Renderer {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.clear_colour = new Float32Array([1, 1, 1, 1]);\r\n    }\r\n\r\n    clear() {\r\n        let gl = this.gl;\r\n        gl.clearColor(...this.clear_colour);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    draw(vertex_array, index_buffer, shader) {\r\n        let gl = this.gl;\r\n\r\n        shader.bind();\r\n        vertex_array.bind();\r\n        index_buffer.bind();\r\n\r\n        gl.drawElements(gl.TRIANGLES, index_buffer.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}","export class Texture2D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        this.bind();\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.R8, shape[0], shape[1], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, shape[0], shape[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    }\r\n\r\n    active(slot=0) {\r\n        let gl = this.gl;\r\n        this.bind();\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n    }\r\n}","export class FrameBuffer {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.fb = gl.createFramebuffer();\r\n    }\r\n\r\n    attach_texture2D(texture2D) {\r\n        let gl = this.gl;\r\n        let texture = texture2D.texture;\r\n        this.bind();\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n        this.unbind();\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb);\r\n    }\r\n\r\n    unbind() {\r\n        let gl = this.gl;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n\r\n}","import { Texture2D } from '../gl/Texture2D';\r\nimport { FrameBuffer } from '../gl/FrameBuffer';\r\n\r\nexport class GridRender {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n\r\n        this.shape = shape;\r\n        this.data = data;\r\n        this.count = shape[0]*shape[1];\r\n\r\n        this.data_texture = new Texture2D(gl, this.data, this.shape);\r\n        this.frame_buffer = new FrameBuffer(gl);\r\n        this.frame_buffer.attach_texture2D(this.data_texture);\r\n    }\r\n\r\n    refresh() {\r\n        let gl = this.gl;\r\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.shape[0], this.shape[1], gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind() {\r\n        // this.frame_buffer.bind();\r\n        // this.data_texture.bind();\r\n        // // gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);\r\n        // // gl.viewport(0, 0, 800, 800);\r\n        // gl.drawBuffers([gl.COLOR_ATTACHMENT0]);\r\n        // // // gl.drawPixels(this.shape[0], this.shape[1], gl.UNSIGNED_BYTE, this.data);\r\n        // this.frame_buffer.unbind();\r\n\r\n        this.data_texture.active(0);\r\n    }\r\n}","import { QuadTreeNode } from \"./QuadTree\";\r\n\r\nexport class QuadTreeSimulated extends QuadTreeNode {\r\n    constructor(nw, ne, sw, se) {\r\n        super(nw, ne, sw, se);\r\n        this.result = null;\r\n    }\r\n\r\n    create(nw, ne, sw, se) {\r\n        return new QuadTreeSimulated(nw, ne, sw, se);\r\n    }\r\n\r\n    create_horizontal(west, east) {\r\n        //  1 1 1 1 2 2 2 2\r\n        //  1 1 1 1 2 2 2 2\r\n        //  1 1 1 1 2 2 2 2\r\n        //  1 1 1 1 2 2 2 2\r\n        return this.create(west.ne, east.nw, west.se, east.sw);\r\n    }\r\n\r\n    create_vertical(north, south) {\r\n        // 1 1 1 1\r\n        // 1 1 1 1\r\n        // 1 1 1 1\r\n        // 1 1 1 1\r\n        // 2 2 2 2\r\n        // 2 2 2 2\r\n        // 2 2 2 2\r\n        // 2 2 2 2\r\n        return this.create(north.sw, north.se, south.nw, south.ne);\r\n    }\r\n\r\n    create_center() {\r\n        return this.create(this.nw.se, this.ne.sw, this.sw.ne, this.se.nw);\r\n    }\r\n\r\n    // current node can only determine centered subnode 1 level down\r\n    get_next_generation() {\r\n        // if result cached, just send\r\n        if (this.result !== null) {\r\n            return this.result;\r\n        }\r\n        // empty then ignore\r\n        if (this.population === 0) {\r\n            this.result = this.nw;\r\n            return this.result;\r\n        }\r\n        // if at level 2 (4x4), we can perform a the slow simulation\r\n        if (this.level === 2) {\r\n            this.result = this.slow_simulation();\r\n            return this.result;\r\n        }\r\n        // consider a level 3 node\r\n        // this would be 8x8\r\n        // we want to return a level 2 node centred\r\n        // this would be 4x4\r\n        //    0 1 2 3 | 4 5 6 7\r\n        //\r\n        // 0  o o o o | o o o o\r\n        // 1  o 1 1 2 | 2 3 3 o\r\n        // 2  o 1 1 2 | 2 3 3 o\r\n        // 3  o 4 4 5 | 5 6 6 o\r\n        //    --------|--------\r\n        // 4  o 4 4 5 | 5 6 6 o\r\n        // 5  o 7 7 8 | 8 9 9 o\r\n        // 6  o 7 7 8 | 8 9 9 o\r\n        // 7  o o o o | o o o o\r\n        // \r\n        // we get the 9 (2x2) matrixes and iterate one generation\r\n        // we get the results from these matrixes, and cluster then into 4 4x2 matrixes\r\n        // we get iterate on generation forward\r\n        //    0 1 2 3 | 4 5 6 7\r\n        //\r\n        // 0  o o o o | o o o o\r\n        // 1  o o o o | o o o o\r\n        // 2  o o 1 1 | 2 2 o o\r\n        // 3  o o 1 1 | 2 2 o o\r\n        //    --------|--------\r\n        // 4  o o 3 3 | 4 4 o o\r\n        // 5  o o 3 3 | 4 4 o o\r\n        // 6  o o o o | o o o o\r\n        // 7  o o o o | o o o o\r\n        // we combine these matrixes and get one generation ahead once more\r\n        // this gives us an output matrix that is 3 generations ahead\r\n        // label these matrixes as\r\n        //   0 1 2\r\n        // 0 x x x\r\n        // 1 x x x\r\n        // 2 x x x\r\n        let n00 = this.nw.get_next_generation(); \r\n        let n01 = this.create_horizontal(this.nw, this.ne).get_next_generation();\r\n        let n02 = this.ne.get_next_generation(); \r\n\r\n        let n10 = this.create_vertical(this.nw, this.sw).get_next_generation(); \r\n        let n11 = this.create_center().get_next_generation();\r\n        let n12 = this.create_vertical(this.ne, this.se).get_next_generation(); \r\n\r\n        let n20 = this.sw.get_next_generation(); \r\n        let n21 = this.create_horizontal(this.sw, this.se).get_next_generation();\r\n        let n22 = this.se.get_next_generation(); \r\n\r\n        // quads from these\r\n        let nw = this.create(n00, n01, n10, n11).get_next_generation();\r\n        let ne = this.create(n01, n02, n11, n12).get_next_generation();\r\n        let sw = this.create(n10, n11, n20, n21).get_next_generation();\r\n        let se = this.create(n11, n12, n21, n22).get_next_generation();\r\n\r\n        // stitch results into a central quad\r\n        this.result = this.create(nw, ne, sw, se);\r\n        return this.result;\r\n    }\r\n\r\n    // take in a 4x4 node\r\n    // return the centered 2x2 node one generation ahead\r\n    // get next state of 5th cell\r\n    // this would be (x, y) = (2, 2)\r\n    //      0  1  2  3\r\n    //   | -----------\r\n    // 0 |  0  1  2  3  \r\n    // 1 |  4  5  6  7\r\n    // 2 |  8  9 10 11\r\n    // 3 | 12 13 14 15\r\n    // we only consider centre (2x2)\r\n    // this would be bits 10, 9, 6, 5\r\n    slow_simulation() {\r\n        let bits = 0;\r\n        // store the 4x4 data inside a 16bit value\r\n        for (let x = 0; x < 4; x++) {\r\n            for (let y = 0; y < 4; y++) {\r\n                // bits = (bits << 1) + this.get(x, y);\r\n                bits |= this.get(x, y) << (x + y*4);\r\n            }\r\n        }\r\n        // debug_out(bits);\r\n        let nw = this.create(this.one_generation(bits >> 0)); // bit 10\r\n        let ne = this.create(this.one_generation(bits >> 1)); // bit 9\r\n        let sw = this.create(this.one_generation(bits >> 4)); // bit 6\r\n        let se = this.create(this.one_generation(bits >> 5)); // bit 5\r\n        let res = this.create(nw, ne, sw, se);\r\n        // debug_2x2(res);\r\n        return res;\r\n    }\r\n\r\n    // we make the assumption that the cell we calculate is bit 5\r\n    // we ignore the following bits\r\n    // 0000 0111 0101 0111\r\n    // 0x0757\r\n    one_generation(bits) {\r\n        if (bits === 0) \r\n            return 0;\r\n\r\n        let self = (bits >> 5) & 1;\r\n        bits &= 0x757;\r\n        let neighbours = 0;\r\n        while (bits !== 0) {\r\n            neighbours++;\r\n            // max of 8 neighbours\r\n            // b-1            => b & (b-1) \r\n            //                   0111 0101 0111\r\n            // 0111 0101 0110 => 0111 0101 0110\r\n            // 0111 0101 0101 => 0111 0101 0100\r\n            // 0111 0101 0011 => 0111 0101 0000\r\n            // 0111 0100 1111 => 0111 0100 0000\r\n            // etc\r\n            bits &= bits-1; // remove last bit\r\n        }\r\n        if (neighbours === 3 || (neighbours === 2 && self !== 0)) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\nfunction debug_out(bits) {\r\n    // store the 4x4 data inside a 16bit value\r\n    let c = [];\r\n    for (let y = 0; y < 4; y++) {\r\n        let r = [];\r\n        for (let x = 0; x < 4; x++) {\r\n            // bits = (bits << 1) + this.get(x, y);\r\n            if (bits & (1 << (x + y*4))) {\r\n                r.push(1);\r\n            } else {\r\n                r.push(0);\r\n            }\r\n        }\r\n        c.push(r.join(','));\r\n    }\r\n    console.log(c.join('\\n'));\r\n}\r\n\r\nfunction debug_2x2(node) {\r\n    let c = [];\r\n    let r = [];\r\n    r.push(node.nw.population);\r\n    r.push(node.ne.population);\r\n    c.push(r.join(','));\r\n\r\n    r = [];\r\n    r.push(node.sw.population);\r\n    r.push(node.se.population);\r\n    c.push(r.join(','));\r\n    console.log(c.join('\\n'));\r\n}\r\n\r\n\r\n","export class QuadTreeNode {\r\n    constructor(nw, ne, sw, se) {\r\n        if (ne === undefined) {\r\n            if (typeof nw === 'object') {\r\n                console.error(nw);\r\n                throw new Error('Invalid level 0 node');\r\n            }\r\n            this.population = nw;\r\n            this.level = 0;\r\n            return;\r\n        }\r\n\r\n        this.nw = nw;\r\n        this.ne = ne;\r\n        this.sw = sw;\r\n        this.se = se;\r\n\r\n        if (this.nw.level !== this.ne.level ||\r\n            this.nw.level !== this.sw.level ||\r\n            this.nw.level !== this.se.level) \r\n        {\r\n            console.error(this);\r\n            throw new Error(`Nodes of level are not the same: ${this}`);\r\n        }\r\n\r\n        this.level = this.nw.level + 1;\r\n        this.population = nw.population + ne.population + sw.population + se.population;\r\n    }\r\n\r\n    // factory methods\r\n    // allows for overriding to perform intermediate hashing\r\n    create(nw, ne, sw, se) {\r\n        return new QuadTreeNode(nw, ne, sw, se);\r\n    }\r\n\r\n    static bootstrap(alive, level) {\r\n        return new QuadTreeNode(0).create_tree(alive, level);\r\n    }\r\n\r\n    create_tree(alive, level) {\r\n        if (level === 0) {\r\n            return this.create(alive);\r\n        }\r\n        let n = this.create_tree(alive, level-1);\r\n        return this.create(n, n, n, n);\r\n    }\r\n\r\n    set(x, y, alive) {\r\n        if (this.level === 0) {\r\n            return this.create(alive);\r\n        }\r\n        // quad tree (x, y)\r\n        // centre of quad tree is (0, 0)\r\n        // return a new quad tree at this level\r\n        // consider a 4x4 node (level 2)\r\n        // level 2               level 1             level 0\r\n        //   0 1 2 3          0 1 0 1         - - - -\r\n        // 0 a a b b    ==> 0 a a b b   ==> - a a b b   \r\n        // 1 a a b b        1 a a b b       - a a b b\r\n        // 2 c c d d        0 c c d d       - c c d d\r\n        // 3 c c d d        1 c c d d       - c c d d    \r\n\r\n        let offset = 1 << (this.level-1);\r\n        let [nw, ne, sw, se] = [this.nw, this.ne, this.sw, this.se];\r\n        if (x >= offset) {\r\n            // nw\r\n            if (y < offset) {\r\n                nw = this.nw.set(x-offset, y, alive);\r\n            // sw\r\n            } else {\r\n                sw = this.sw.set(x-offset, y-offset, alive);\r\n            }\r\n        } else {\r\n            // ne\r\n            if (y < offset) {\r\n                ne = this.ne.set(x, y, alive);\r\n            // se\r\n            } else {\r\n                se = this.se.set(x, y-offset, alive);\r\n            }\r\n        }\r\n\r\n        return this.create(nw, ne, sw, se);\r\n    }\r\n\r\n    get(x, y) {\r\n        if (this.level === 0) {\r\n            return this.population;\r\n        }\r\n        let offset = 1 << (this.level-1);\r\n        if (x >= offset) {\r\n            // nw\r\n            if (y < offset) {\r\n                return this.ne.get(x-offset, y);\r\n            // sw\r\n            } else {\r\n                return this.se.get(x-offset, y-offset);\r\n            }\r\n        } else {\r\n            // ne\r\n            if (y < offset) {\r\n                return this.nw.get(x, y);\r\n            // se\r\n            } else {\r\n                return this.sw.get(x, y-offset);\r\n            }\r\n        }\r\n    }\r\n\r\n    // create a node one level up, where this node is in the center\r\n    expand() {\r\n        // consider 2x2 case into a 4x4\r\n        // o o o o\r\n        // o x x o\r\n        // o x x o\r\n        // o o o o\r\n        // at level 1 (2x2), we need to generate a border one level down \r\n        // level 0 (1x1) - pad as border\r\n        let n = this.create_tree(0, this.level-1);\r\n        let nw = this.create(n, n, n, this.nw);\r\n        let ne = this.create(n, n, this.ne, n);\r\n        let sw = this.create(n, this.sw, n, n);\r\n        let se = this.create(this.se, n, n, n);\r\n        let expanded = this.create(nw, ne, sw, se);\r\n        return expanded;\r\n    }\r\n}","import { QuadTreeSimulated } from \"./QuadTreeSimulated\";\r\n\r\nclass HashMap {\r\n    constructor() {\r\n        this.map = {};\r\n    }\r\n\r\n    put(key, item) {\r\n        let entries = this.map[key];\r\n        if (entries === undefined) {\r\n            this.map[key] = [item];\r\n            return item;\r\n        }\r\n        for (let entry of entries) {\r\n            if (entry.equals(item)) {\r\n                return entry;\r\n            }\r\n        }\r\n        entries.push(item);\r\n        return item;\r\n    }\r\n}\r\n\r\nexport class HashLifeNode extends QuadTreeSimulated {\r\n    static HashedNodes = new HashMap();\r\n    static CurrentID = 101;\r\n\r\n    constructor(nw, ne, sw, se) {\r\n        super(nw, ne, sw, se);\r\n        this.address = HashLifeNode.generate_id();\r\n    }\r\n\r\n    equals(n) {\r\n        if (n.level !== this.level) {\r\n            return false;\r\n        }\r\n        if (n.level === 0) {\r\n            return n.population === this.population;\r\n        }\r\n        return (\r\n            n.nw === this.nw &&\r\n            n.ne === this.ne &&\r\n            n.sw === this.sw &&\r\n            n.se === this.se\r\n        );\r\n    }\r\n\r\n    hash_code() {\r\n        if (this.level === 0) {\r\n            return this.population;\r\n        } \r\n        return this.nw.address +\r\n            11 * this.ne.address + \r\n            101 * this.sw.address +\r\n            1007 * this.se.address;\r\n    }\r\n\r\n    // get random number\r\n    static generate_id() {\r\n        let id = HashLifeNode.CurrentID;\r\n        HashLifeNode.CurrentID += 7;\r\n        return id;\r\n    }\r\n\r\n    static put_default_node(node) {\r\n        let key = node.hash_code();\r\n        let stored = HashLifeNode.HashedNodes.put(key, node);\r\n        if (!node.equals(stored)) {\r\n            console.error('Bad entries');\r\n            console.error(stored, stored.hash_code());\r\n            console.error(node, node.hash_code());\r\n            throw new Error('Mismatch in hash list');\r\n        }\r\n        return stored;\r\n    }\r\n\r\n    // override factory method by adding a hash\r\n    create(nw, ne, sw, se) {\r\n        let node = new HashLifeNode(nw, ne, sw, se);\r\n        node = HashLifeNode.put_default_node(node);\r\n        return node;\r\n    }\r\n\r\n    static bootstrap(alive, level) {\r\n        return new HashLifeNode(0).create_tree(alive, level);\r\n    }\r\n}\r\n\r\n","import { HashLifeNode } from \"./HashLife\";\r\n\r\nexport class Simulation {\r\n    constructor(initial_level=3) {\r\n        this.root = HashLifeNode.bootstrap(0, initial_level);\r\n        this.construct_buffer();\r\n    }\r\n\r\n    construct_buffer() {\r\n        if (this.root.level === this.current_level) {\r\n            return;\r\n        }\r\n        this.current_level = this.root.level;\r\n        let dim = (1 << this.root.level);\r\n        this.shape = [dim, dim];\r\n        this.count = dim*dim; \r\n        this.buffer = new Uint8Array(this.count);\r\n    }\r\n\r\n    randomise() {\r\n        let dim = (1 << this.root.level);\r\n        // randomise abit\r\n        for (let x = 0; x < dim; x++) {\r\n            for (let y = 0; y < dim; y++) {\r\n                let state = (Math.random() > 0.5) ? 1 : 0;\r\n                if (state) {\r\n                    this.root = this.root.set(x, y, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    step() {\r\n        if (this.root.level >= 9) {\r\n            this.wrapped_step();\r\n        } else {\r\n            this.expanding_step(); \r\n        }\r\n        this.update_buffer();\r\n    }\r\n\r\n    expanding_step() {\r\n        while (true) {\r\n            let root = this.root;\r\n            let [nw, ne, sw, se] = [root.nw, root.ne, root.sw, root.se];\r\n            if (root.level < 3 ||\r\n                nw.population !== nw.se.se.population ||\r\n                ne.population !== ne.sw.sw.population ||\r\n                sw.population !== sw.ne.ne.population ||\r\n                se.population !== se.nw.nw.population)\r\n            {\r\n                this.root = this.root.expand();\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        this.root = this.root.get_next_generation();\r\n    }\r\n\r\n    wrapped_step() {\r\n        let orig = this.root;\r\n        let center = this.root.get_next_generation();\r\n        let horizontal = orig.create(orig.ne, orig.nw, orig.se, orig.sw).get_next_generation();\r\n        let vertical = orig.create(orig.sw, orig.se, orig.nw, orig.ne).get_next_generation();\r\n        let corner = orig.create(orig.se, orig.sw, orig.ne, orig.nw).get_next_generation();\r\n\r\n        let nw = orig.create(corner.se, vertical.sw, horizontal.ne, center.nw);\r\n        let ne = orig.create(vertical.se, corner.sw, center.ne, horizontal.nw);\r\n        let sw = orig.create(horizontal.se, center.sw, corner.ne, vertical.nw);\r\n        let se = orig.create(center.se, horizontal.sw, vertical.ne, corner.nw);\r\n\r\n        let root = orig.create(nw, ne, sw, se);\r\n        this.root = root;\r\n    }\r\n\r\n    update_buffer() {\r\n        this.construct_buffer();\r\n        this.draw_recursive(this.root, 0, 0);\r\n    }\r\n\r\n    draw_recursive(node, xoff, yoff) {\r\n        if (node.level === 0) {\r\n            this.buffer[xoff + yoff*this.shape[0]] = node.population ? 0 : 255;\r\n            return;\r\n        }\r\n        let offset = 1 << (node.level-1);\r\n        this.draw_recursive(node.nw, xoff       , yoff);\r\n        this.draw_recursive(node.ne, xoff+offset, yoff);\r\n        this.draw_recursive(node.sw, xoff       , yoff+offset);\r\n        this.draw_recursive(node.se, xoff+offset, yoff+offset);\r\n    }\r\n}","import { Shader } from '../gl/Shader';\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../gl/VertexBuffer';\r\nimport { Uniform } from '../gl/Uniform';\r\nimport { IndexBuffer } from '../gl/IndexBuffer';\r\n\r\nimport basic_shader from '../shaders/basic';\r\nimport { Renderer } from '../gl/Renderer';\r\nimport { GridRender } from './GridRender';\r\nimport { Simulation } from '../hashlife/Simulation';\r\n\r\nconst quad = {\r\n    vertex_data: new Float32Array([\r\n        -1, -1, \r\n        -1,  1,\r\n            1, -1,\r\n            1,  1\r\n    ]),\r\n    index_data: new Uint32Array([\r\n        0, 3, 1,\r\n        0, 2, 3,\r\n    ])\r\n};\r\n\r\nexport class App {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n\r\n        this.renderer = new Renderer(gl);\r\n        this.shader = new Shader(gl, basic_shader.vertex, basic_shader.frag);\r\n        this.shader.add_uniform('uDataTexture', new Uniform(loc => gl.uniform1i(loc, 0)));\r\n\r\n        this.vbo = new VertexBufferObject(gl, quad.vertex_data, gl.STATIC_DRAW);\r\n        this.ibo = new IndexBuffer(gl, quad.index_data);\r\n        \r\n        let layout = new VertexBufferLayout(gl);\r\n        layout.push_attribute(0, 2, gl.FLOAT, false);\r\n\r\n        this.vao = new VertexArrayObject(gl);\r\n        this.vao.add_vertex_buffer(this.vbo, layout);\r\n\r\n        this.sim = new Simulation(8);\r\n        this.sim.randomise();\r\n        this.sim.update_buffer();\r\n\r\n        this.grid = new GridRender(gl, this.sim.buffer, this.sim.shape);\r\n\r\n        this.steps = 0;\r\n    }\r\n\r\n\r\n    run() {\r\n        requestAnimationFrame(this.loop.bind(this));\r\n    }\r\n\r\n    loop() {\r\n        this.on_update();\r\n        this.on_render();\r\n        requestAnimationFrame(this.loop.bind(this));\r\n    }\r\n\r\n    on_update() {\r\n        if (this.running) {\r\n            this.step();\r\n        }\r\n        if (this.steps > 0) {\r\n            this.step();\r\n            this.steps -= 1;\r\n        }\r\n    }\r\n\r\n    step() {\r\n        this.sim.step();\r\n        this.sim.update_buffer();\r\n        if (this.sim.buffer !== this.grid.data) {\r\n            this.grid = new GridRender(this.gl, this.sim.buffer, this.sim.shape);\r\n        } else {\r\n            this.grid.refresh();\r\n        }\r\n    }\r\n\r\n    randomise() {\r\n        this.sim.randomise();\r\n        this.sim.update_buffer();\r\n        if (this.sim.buffer !== this.grid.data) {\r\n            this.grid = new GridRender(this.gl, this.sim.buffer, this.sim.shape);\r\n        } else {\r\n            this.grid.refresh();\r\n        }\r\n    }\r\n\r\n    on_render() {\r\n        let gl = this.gl;\r\n\r\n        this.shader.bind();\r\n        this.vao.bind();\r\n        this.ibo.bind();\r\n        this.grid.bind();\r\n\r\n        this.renderer.clear();\r\n        this.renderer.draw(this.vao, this.ibo, this.shader);\r\n        // gl.drawElements(gl.TRIANGLES, this.ibo.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}\r\n\r\n","import React, { createRef } from 'react';\nimport { App } from './app/App';\n\nexport class AppView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = createRef();\n    this.state = {\n      failed_webgl: false\n    };\n  }\n\n  componentDidMount() {\n    let canvas = this.ref.current;\n    let gl = canvas.getContext('webgl2'); \n    if (!gl) {\n      this.setState({...this.state, failed_webgl: true});\n      return;\n    }\n\n    let app = new App(gl);\n    app.run();\n    this.app = app;\n  }  \n\n  step() {\n    this.app.steps = 1;\n  }\n\n  toggle() {\n    this.app.running = !this.app.running;\n  }\n\n  randomise() {\n    this.app.randomise();\n  }\n\n  render() {\n    if (this.state.failed_webgl) {\n      return <div>Requires WebGL2 Support</div>\n    }\n\n    return (\n      <div>\n        <button onClick={ev => this.randomise()}>Randomiser</button>\n        <button onClick={ev => this.step()}>Step</button>\n        <button onClick={ev => this.toggle()}>Toggle</button>\n        <canvas width={800} height={800} ref={this.ref}></canvas>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AppView } from './AppView';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppView/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}