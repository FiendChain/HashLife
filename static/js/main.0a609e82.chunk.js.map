{"version":3,"sources":["gl/Shader.js","gl/VertexBuffer.js","gl/Uniform.js","gl/IndexBuffer.js","shaders/basic.js","gl/Renderer.js","gl/Texture2D.js","gl/FrameBuffer.js","app/GridRender.js","hashlife/QuadTreeSimulated.js","hashlife/QuadTree.js","hashlife/HashLife.js","hashlife/Simulation.js","app/App.js","AppView.js","index.js"],"names":["Shader","gl","vertex_shader_src","fragment_shader_src","this","create_shader_program","uniforms","locations","vertex_shader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","prepend_line_numbers","Error","fragment_shader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","create_program","name","uniform","location","getUniformLocation","push","useProgram","i","length","apply","src","split","map","v","join","VertexBufferObject","data","usage","vbo","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","VertexArrayObject","vao","createVertexArray","integer_types","Set","INT","UNSIGNED_INT","layout","bind","offset","attributes","attribute","enableVertexAttribArray","index","has","type","vertexAttribIPointer","count","is_normalised","stride","vertexAttribPointer","size","bindVertexArray","VertexBufferLayout","sizeof","VertexBufferAttribute","start","end","slice","FLOAT","Uniform","callback","IndexBuffer","buffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","Renderer","clear_colour","Float32Array","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertex_array","index_buffer","shader","drawElements","TRIANGLES","Texture2D","shape","texture","createTexture","texParameteri","TEXTURE_2D","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","pixelStorei","UNPACK_ALIGNMENT","texImage2D","R8","RED","UNSIGNED_BYTE","bindTexture","slot","activeTexture","TEXTURE0","FrameBuffer","fb","createFramebuffer","texture2D","framebufferTexture2D","FRAMEBUFFER","COLOR_ATTACHMENT0","unbind","bindFramebuffer","GridRender","data_texture","frame_buffer","attach_texture2D","texSubImage2D","active","QuadTreeSimulated","nw","ne","sw","se","time_compression","result","west","east","create","north","south","population","level","slow_simulation","n00","n01","create_horizontal","n02","n10","create_vertical","n11","create_center","n12","n20","n21","n22","get_next_generation","bits","x","y","get","one_generation","self","neighbours","undefined","alive","n","create_tree","set","QuadTreeNode","HashMap","hits","misses","log","key","entries","item","HashLifeNode","entry","equals","address","generate_id","put_default_node","id","CurrentID","hash_code","HashedNodes","put","Simulation","initial_level","root","bootstrap","construct_buffer","Uint8Array","xstart","xend","ystart","yend","randomise_recursive","update_buffer","fill_recursive","node","state","xoff","yoff","dim","min","max","other","Math","random","wrapped_step","expanding_step","expand","center","horizontal","vertical","corner","draw_recursive","quad","vertex_data","index_data","Uint32Array","App","renderer","basic_shader","add_uniform","loc","uniform1i","ibo","push_attribute","add_vertex_buffer","sim","grid","steps","requestAnimationFrame","loop","on_update","on_render","running","step","refresh","randomise","draw","AppView","props","ref","createRef","failed_webgl","controller","MouseController","current","getContext","app","run","is_randomise","is_clear","listen_drag","setState","ev","on_mouse_down","button","on_mouse_up","preventDefault","onClick","toggle","width","height","onMouseDown","onMouseMove","on_mouse_move","onMouseUp","React","Component","drag_start","vec2","drag_end","drag_listeners","list","add","fromValues","clientX","clientY","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a609e82.chunk.js","sourcesContent":["export class Shader {\r\n  constructor(gl, vertex_shader_src, fragment_shader_src) {\r\n    this.gl = gl;\r\n    this.create_shader_program(vertex_shader_src, fragment_shader_src);\r\n    this.uniforms = []; \r\n    this.locations = [];\r\n  }\r\n\r\n  create_shader_program(vertex_shader_src, fragment_shader_src) {\r\n    [this.vertex_shader, this.fragment_shader, this.program] = create_program(this.gl, vertex_shader_src, fragment_shader_src); \r\n  }\r\n\r\n  // add to list of uniforms permanently binded to shader\r\n  add_uniform(name, uniform) {\r\n    let gl = this.gl;\r\n    let location = gl.getUniformLocation(this.program, name);\r\n    if (location === null) {\r\n      // console.warn(`Couldn't find location of uniform ${name}`);\r\n      // throw new Error(`Couldn't find location of uniform ${name}`);\r\n    } \r\n    this.uniforms.push(uniform);\r\n    this.locations.push(location);\r\n  }\r\n\r\n  // dynamic sub in uniform\r\n  // apply_uniform(name, uniform) {\r\n  //   let gl = this.gl;\r\n  //   this.bind();\r\n  //   let location = gl.getUniformLocation(this.program, name);\r\n  //   uniform.apply(location);\r\n  // }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.useProgram(this.program);\r\n    for (let i = 0; i < this.uniforms.length; i++) {\r\n      let uniform = this.uniforms[i];\r\n      let location = this.locations[i];\r\n      if (location === null) {\r\n        continue;\r\n      }\r\n      uniform.apply(location);\r\n    }\r\n  }\r\n}\r\n\r\nfunction create_program(gl, vertex_shader_src, fragment_shader_src) {\r\n  const vertex_shader = gl.createShader(gl.VERTEX_SHADER);\r\n  gl.shaderSource(vertex_shader, vertex_shader_src);\r\n  gl.compileShader(vertex_shader);\r\n  if (!gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(vertex_shader));\r\n    console.error(prepend_line_numbers(vertex_shader_src));\r\n    throw new Error('Unable to compile vertex shader');\r\n  }\r\n\r\n  const fragment_shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n  gl.shaderSource(fragment_shader, fragment_shader_src);\r\n  gl.compileShader(fragment_shader);\r\n  if (!gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(fragment_shader));\r\n    throw new Error('Unable to compile fragment shader');\r\n  }\r\n\r\n  const program = gl.createProgram();\r\n  gl.attachShader(program, vertex_shader);\r\n  gl.attachShader(program, fragment_shader);\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    console.error(gl.getProgramInfoLog(program));\r\n    console.error(prepend_line_numbers(fragment_shader_src));\r\n    throw new Error('Unable to construct shader program');\r\n  }\r\n\r\n  return [vertex_shader, fragment_shader, program];\r\n}\r\n\r\nfunction prepend_line_numbers(src) {\r\n  let lines = src.split('\\n').map((v, i) => `${i+1}\\t| ${v}`);\r\n  let out = lines.join('\\n');\r\n  return out;\r\n}","// 1D array containing n elements\r\n// can contain arbitary data\r\nexport class VertexBufferObject {\r\n  constructor(gl, data, usage) {\r\n    this.gl = gl;\r\n\r\n    this.data = data;\r\n\r\n    this.vbo = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n    gl.bufferData(gl.ARRAY_BUFFER, data, usage);\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n  }\r\n}\r\n\r\nexport class VertexArrayObject {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.vao = gl.createVertexArray();\r\n    this.integer_types = new Set([gl.INT, gl.UNSIGNED_INT]);\r\n  }\r\n\r\n  add_vertex_buffer(vbo, layout) {\r\n    let gl = this.gl;\r\n\r\n    this.bind();\r\n    vbo.bind();\r\n\r\n    let offset = 0;\r\n    for (let attribute of layout.attributes) {\r\n      gl.enableVertexAttribArray(attribute.index);\r\n      if (this.integer_types.has(attribute.type)) {\r\n        gl.vertexAttribIPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      } else {\r\n        gl.vertexAttribPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      }\r\n      offset += attribute.count * attribute.size;\r\n    }\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindVertexArray(this.vao);\r\n  }\r\n}\r\n\r\nexport class VertexBufferLayout {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.stride = 0;\r\n    this.attributes = [];\r\n  }\r\n\r\n  push_attribute(index, count, type, is_normalised) {\r\n    let size = this.sizeof(type);\r\n    let attribute = new VertexBufferAttribute(index, count, type, is_normalised, size);\r\n    this.attributes.push(attribute);\r\n    this.stride += count * size;\r\n  }\r\n\r\n  slice(start, end) {\r\n    let layout = new VertexBufferLayout();\r\n    layout.stride = this.stride;\r\n    layout.attributes = this.attributes.slice(start, end);\r\n    return layout;\r\n  }\r\n\r\n  sizeof(type) {\r\n    let gl = this.gl;\r\n\r\n    switch (type) {\r\n    case gl.FLOAT: return 4;\r\n    case gl.UNSIGNED_INT: return 4;\r\n    case gl.INT: return 4;\r\n    default: throw new Error(`Unknown element type: ${type}`);\r\n    }\r\n  }\r\n}\r\n\r\n// each element in the shader has an attribute index\r\n// layout(location = <attribute_index>) in vec3 position;\r\n// layout(locaiton = <attribute_index>) in vec3 normal;\r\nclass VertexBufferAttribute {\r\n  constructor(index, count, type, is_normalised, size) {\r\n    this.index = index;\r\n    this.count = count;\r\n    this.type = type;\r\n    this.is_normalised = is_normalised;\r\n    this.size = size;\r\n  }\r\n\r\n  \r\n}","export class UniformMat4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n       this.gl.uniformMatrix4fv(location, false, this.data);\r\n    }\r\n}\r\n\r\nexport class UniformVec3f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform3f(location, this.data[0], this.data[1], this.data[2]);\r\n    }\r\n}\r\n\r\nexport class UniformVec4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform4f(location, this.data[0], this.data[1], this.data[2], this.data[3]);\r\n    }\r\n}\r\n\r\nexport class Uniform {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    apply(location) {\r\n        this.callback(location);\r\n    }\r\n}","export class IndexBuffer {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n\r\n        this.buffer = gl.createBuffer();\r\n        this.count = data.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer); \r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW); // gluint is 4 bytes\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);\r\n    }\r\n}","const vertex = \r\n`#version 300 es\r\nprecision mediump float;\r\n\r\nin vec2 position;\r\n\r\nout vec2 vPosition;\r\n\r\nvoid main() {\r\n    vPosition = vec2((position.x+1.0)/2.0, (-position.y+1.0)/2.0);\r\n    gl_Position = vec4(position.x, position.y, 0.0, 1.0);\r\n}`;\r\n\r\nconst frag = \r\n`#version 300 es\r\nprecision mediump float;\r\nprecision highp sampler2D;\r\n\r\nin vec2 vPosition;\r\n\r\nout vec4 FragColour;\r\n\r\nuniform sampler2D uDataTexture;\r\n\r\nvoid main() {\r\n    vec4 cell = texture(uDataTexture, vPosition);\r\n    float state = 1.0-cell[0];\r\n    FragColour = vec4(state, state, state, 1.0);\r\n    // FragColour = vec4(vPosition.x, vPosition.y, 1.0, 1.0);\r\n}`;\r\n\r\nexport default {vertex: vertex, frag: frag};","export class Renderer {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.clear_colour = new Float32Array([1, 1, 1, 1]);\r\n    }\r\n\r\n    clear() {\r\n        let gl = this.gl;\r\n        gl.clearColor(...this.clear_colour);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    draw(vertex_array, index_buffer, shader) {\r\n        let gl = this.gl;\r\n\r\n        shader.bind();\r\n        vertex_array.bind();\r\n        index_buffer.bind();\r\n\r\n        gl.drawElements(gl.TRIANGLES, index_buffer.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}","export class Texture2D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        this.bind();\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.R8, shape[0], shape[1], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, shape[0], shape[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    }\r\n\r\n    active(slot=0) {\r\n        let gl = this.gl;\r\n        this.bind();\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n    }\r\n}","export class FrameBuffer {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.fb = gl.createFramebuffer();\r\n    }\r\n\r\n    attach_texture2D(texture2D) {\r\n        let gl = this.gl;\r\n        let texture = texture2D.texture;\r\n        this.bind();\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n        this.unbind();\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb);\r\n    }\r\n\r\n    unbind() {\r\n        let gl = this.gl;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n\r\n}","import { Texture2D } from '../gl/Texture2D';\r\nimport { FrameBuffer } from '../gl/FrameBuffer';\r\n\r\nexport class GridRender {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n\r\n        this.shape = shape;\r\n        this.data = data;\r\n        this.count = shape[0]*shape[1];\r\n\r\n        this.data_texture = new Texture2D(gl, this.data, this.shape);\r\n        this.frame_buffer = new FrameBuffer(gl);\r\n        this.frame_buffer.attach_texture2D(this.data_texture);\r\n    }\r\n\r\n    refresh() {\r\n        let gl = this.gl;\r\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.shape[0], this.shape[1], gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind() {\r\n        // this.frame_buffer.bind();\r\n        // this.data_texture.bind();\r\n        // // gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);\r\n        // // gl.viewport(0, 0, 800, 800);\r\n        // gl.drawBuffers([gl.COLOR_ATTACHMENT0]);\r\n        // // // gl.drawPixels(this.shape[0], this.shape[1], gl.UNSIGNED_BYTE, this.data);\r\n        // this.frame_buffer.unbind();\r\n\r\n        this.data_texture.active(0);\r\n    }\r\n}","import { QuadTreeNode } from \"./QuadTree\";\r\n\r\nexport class QuadTreeSimulated extends QuadTreeNode {\r\n    constructor(nw, ne, sw, se, time_compression=false) {\r\n        super(nw, ne, sw, se);\r\n        this.result = null;\r\n        this.time_compression = time_compression;\r\n    }\r\n\r\n    create(nw, ne, sw, se, time_compression=false) {\r\n        return new QuadTreeSimulated(nw, ne, sw, se, time_compression);\r\n    }\r\n\r\n    create_horizontal(west, east) {\r\n        //  1 1 1 1 2 2 2 2\r\n        //  1 1 1 1 2 2 2 2\r\n        //  1 1 1 1 2 2 2 2\r\n        //  1 1 1 1 2 2 2 2\r\n        return this.create(west.ne, east.nw, west.se, east.sw);\r\n    }\r\n\r\n    create_vertical(north, south) {\r\n        // 1 1 1 1\r\n        // 1 1 1 1\r\n        // 1 1 1 1\r\n        // 1 1 1 1\r\n        // 2 2 2 2\r\n        // 2 2 2 2\r\n        // 2 2 2 2\r\n        // 2 2 2 2\r\n        return this.create(north.sw, north.se, south.nw, south.ne);\r\n    }\r\n\r\n    create_center() {\r\n        return this.create(this.nw.se, this.ne.sw, this.sw.ne, this.se.nw);\r\n    }\r\n\r\n    // current node can only determine centered subnode 1 level down\r\n    get_next_generation() {\r\n        // if result cached, just send\r\n        if (this.result !== null) {\r\n            return this.result;\r\n        }\r\n        // empty then ignore\r\n        if (this.population === 0) {\r\n            this.result = this.nw;\r\n            return this.result;\r\n        }\r\n        // if at level 2 (4x4), we can perform a the slow simulation\r\n        if (this.level === 2) {\r\n            this.result = this.slow_simulation();\r\n            return this.result;\r\n        }\r\n        // consider a level 3 node\r\n        // this would be 8x8\r\n        // we want to return a level 2 node centred\r\n        // this would be 4x4\r\n        //    0 1 2 3 | 4 5 6 7\r\n        //\r\n        // 0  o o o o | o o o o\r\n        // 1  o 1 1 2 | 2 3 3 o\r\n        // 2  o 1 1 2 | 2 3 3 o\r\n        // 3  o 4 4 5 | 5 6 6 o\r\n        //    --------|--------\r\n        // 4  o 4 4 5 | 5 6 6 o\r\n        // 5  o 7 7 8 | 8 9 9 o\r\n        // 6  o 7 7 8 | 8 9 9 o\r\n        // 7  o o o o | o o o o\r\n        // \r\n        // we get the 9 (2x2) matrixes and iterate one generation\r\n        // we get the results from these matrixes, and cluster then into 4 4x2 matrixes\r\n        // we get iterate on generation forward\r\n        //    0 1 2 3 | 4 5 6 7\r\n        //\r\n        // 0  o o o o | o o o o\r\n        // 1  o o o o | o o o o\r\n        // 2  o o 1 1 | 2 2 o o\r\n        // 3  o o 1 1 | 2 2 o o\r\n        //    --------|--------\r\n        // 4  o o 3 3 | 4 4 o o\r\n        // 5  o o 3 3 | 4 4 o o\r\n        // 6  o o o o | o o o o\r\n        // 7  o o o o | o o o o\r\n        // we combine these matrixes and get one generation ahead once more\r\n        // this gives us an output matrix that is 3 generations ahead\r\n        // label these matrixes as\r\n        //   0 1 2\r\n        // 0 x x x\r\n        // 1 x x x\r\n        // 2 x x x\r\n        let n00 = this.nw; \r\n        let n01 = this.create_horizontal(this.nw, this.ne);\r\n        let n02 = this.ne; \r\n\r\n        let n10 = this.create_vertical(this.nw, this.sw); \r\n        let n11 = this.create_center();\r\n        let n12 = this.create_vertical(this.ne, this.se); \r\n\r\n        let n20 = this.sw; \r\n        let n21 = this.create_horizontal(this.sw, this.se);\r\n        let n22 = this.se; \r\n\r\n        // temporal compression\r\n        if (this.time_compression) {\r\n            n00 = n00.get_next_generation();\r\n            n01 = n01.get_next_generation();\r\n            n02 = n02.get_next_generation();\r\n            n10 = n10.get_next_generation();\r\n            n11 = n11.get_next_generation();\r\n            n12 = n12.get_next_generation();\r\n            n20 = n20.get_next_generation();\r\n            n21 = n21.get_next_generation();\r\n            n22 = n22.get_next_generation();\r\n        } else {\r\n            n00 = n00.create_center();\r\n            n01 = n01.create_center();\r\n            n02 = n02.create_center();\r\n            n10 = n10.create_center();\r\n            n11 = n11.create_center();\r\n            n12 = n12.create_center();\r\n            n20 = n20.create_center();\r\n            n21 = n21.create_center();\r\n            n22 = n22.create_center();\r\n        }\r\n\r\n        // quads from these\r\n        let nw = this.create(n00, n01, n10, n11).get_next_generation();\r\n        let ne = this.create(n01, n02, n11, n12).get_next_generation();\r\n        let sw = this.create(n10, n11, n20, n21).get_next_generation();\r\n        let se = this.create(n11, n12, n21, n22).get_next_generation();\r\n\r\n        // stitch results into a central quad\r\n        this.result = this.create(nw, ne, sw, se);\r\n        return this.result;\r\n    }\r\n\r\n    // take in a 4x4 node\r\n    // return the centered 2x2 node one generation ahead\r\n    // get next state of 5th cell\r\n    // this would be (x, y) = (2, 2)\r\n    //      0  1  2  3\r\n    //   | -----------\r\n    // 0 |  0  1  2  3  \r\n    // 1 |  4  5  6  7\r\n    // 2 |  8  9 10 11\r\n    // 3 | 12 13 14 15\r\n    // we only consider centre (2x2)\r\n    // this would be bits 10, 9, 6, 5\r\n    slow_simulation() {\r\n        let bits = 0;\r\n        // store the 4x4 data inside a 16bit value\r\n        for (let x = 0; x < 4; x++) {\r\n            for (let y = 0; y < 4; y++) {\r\n                // bits = (bits << 1) + this.get(x, y);\r\n                bits |= this.get(x, y) << (x + y*4);\r\n            }\r\n        }\r\n        // debug_out(bits);\r\n        let nw = this.create(this.one_generation(bits >> 0)); // bit 10\r\n        let ne = this.create(this.one_generation(bits >> 1)); // bit 9\r\n        let sw = this.create(this.one_generation(bits >> 4)); // bit 6\r\n        let se = this.create(this.one_generation(bits >> 5)); // bit 5\r\n        let res = this.create(nw, ne, sw, se);\r\n        // debug_2x2(res);\r\n        return res;\r\n    }\r\n\r\n    // we make the assumption that the cell we calculate is bit 5\r\n    // we ignore the following bits\r\n    // 0000 0111 0101 0111\r\n    // 0x0757\r\n    one_generation(bits) {\r\n        if (bits === 0) \r\n            return 0;\r\n\r\n        let self = (bits >> 5) & 1;\r\n        bits &= 0x757;\r\n        let neighbours = 0;\r\n        while (bits !== 0) {\r\n            neighbours++;\r\n            // max of 8 neighbours\r\n            // b-1            => b & (b-1) \r\n            //                   0111 0101 0111\r\n            // 0111 0101 0110 => 0111 0101 0110\r\n            // 0111 0101 0101 => 0111 0101 0100\r\n            // 0111 0101 0011 => 0111 0101 0000\r\n            // 0111 0100 1111 => 0111 0100 0000\r\n            // etc\r\n            bits &= bits-1; // remove last bit\r\n        }\r\n        if (neighbours === 3 || (neighbours === 2 && self !== 0)) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\nfunction debug_out(bits) {\r\n    // store the 4x4 data inside a 16bit value\r\n    let c = [];\r\n    for (let y = 0; y < 4; y++) {\r\n        let r = [];\r\n        for (let x = 0; x < 4; x++) {\r\n            // bits = (bits << 1) + this.get(x, y);\r\n            if (bits & (1 << (x + y*4))) {\r\n                r.push(1);\r\n            } else {\r\n                r.push(0);\r\n            }\r\n        }\r\n        c.push(r.join(','));\r\n    }\r\n    console.log(c.join('\\n'));\r\n}\r\n\r\nfunction debug_2x2(node) {\r\n    let c = [];\r\n    let r = [];\r\n    r.push(node.nw.population);\r\n    r.push(node.ne.population);\r\n    c.push(r.join(','));\r\n\r\n    r = [];\r\n    r.push(node.sw.population);\r\n    r.push(node.se.population);\r\n    c.push(r.join(','));\r\n    console.log(c.join('\\n'));\r\n}\r\n\r\n\r\n","export class QuadTreeNode {\r\n    constructor(nw, ne, sw, se) {\r\n        if (ne === undefined) {\r\n            // if (typeof nw === 'object') {\r\n            //     console.error(nw);\r\n            //     throw new Error('Invalid level 0 node');\r\n            // }\r\n            this.population = nw;\r\n            this.level = 0;\r\n            return;\r\n        }\r\n\r\n        this.nw = nw;\r\n        this.ne = ne;\r\n        this.sw = sw;\r\n        this.se = se;\r\n\r\n        // if (this.nw.level !== this.ne.level ||\r\n        //     this.nw.level !== this.sw.level ||\r\n        //     this.nw.level !== this.se.level) \r\n        // {\r\n        //     console.error(this);\r\n        //     throw new Error(`Nodes of level are not the same: ${this}`);\r\n        // }\r\n\r\n        this.level = this.nw.level + 1;\r\n        this.population = nw.population + ne.population + sw.population + se.population;\r\n    }\r\n\r\n    // factory methods\r\n    // allows for overriding to perform intermediate hashing\r\n    create(nw, ne, sw, se) {\r\n        throw new Error(\"Shouldn't use this factory method for node creation\");\r\n        // return new QuadTreeNode(nw, ne, sw, se);\r\n    }\r\n\r\n    static bootstrap(alive, level) {\r\n        return new QuadTreeNode(0).create_tree(alive, level);\r\n    }\r\n\r\n    create_tree(alive, level) {\r\n        if (level === 0) {\r\n            return this.create(alive);\r\n        }\r\n        let n = this.create_tree(alive, level-1);\r\n        return this.create(n, n, n, n);\r\n    }\r\n\r\n    set(x, y, alive) {\r\n        if (this.level === 0) {\r\n            return this.create(alive);\r\n        }\r\n        // quad tree (x, y)\r\n        // centre of quad tree is (0, 0)\r\n        // return a new quad tree at this level\r\n        // consider a 4x4 node (level 2)\r\n        // level 2               level 1             level 0\r\n        //   0 1 2 3          0 1 0 1         - - - -\r\n        // 0 a a b b    ==> 0 a a b b   ==> - a a b b   \r\n        // 1 a a b b        1 a a b b       - a a b b\r\n        // 2 c c d d        0 c c d d       - c c d d\r\n        // 3 c c d d        1 c c d d       - c c d d    \r\n\r\n        let offset = 1 << (this.level-1);\r\n        let [nw, ne, sw, se] = [this.nw, this.ne, this.sw, this.se];\r\n        if (x >= offset) {\r\n            // nw\r\n            if (y < offset) {\r\n                nw = this.nw.set(x-offset, y, alive);\r\n            // sw\r\n            } else {\r\n                sw = this.sw.set(x-offset, y-offset, alive);\r\n            }\r\n        } else {\r\n            // ne\r\n            if (y < offset) {\r\n                ne = this.ne.set(x, y, alive);\r\n            // se\r\n            } else {\r\n                se = this.se.set(x, y-offset, alive);\r\n            }\r\n        }\r\n\r\n        return this.create(nw, ne, sw, se);\r\n    }\r\n\r\n    get(x, y) {\r\n        if (this.level === 0) {\r\n            return this.population;\r\n        }\r\n        let offset = 1 << (this.level-1);\r\n        if (x >= offset) {\r\n            // nw\r\n            if (y < offset) {\r\n                return this.ne.get(x-offset, y);\r\n            // sw\r\n            } else {\r\n                return this.se.get(x-offset, y-offset);\r\n            }\r\n        } else {\r\n            // ne\r\n            if (y < offset) {\r\n                return this.nw.get(x, y);\r\n            // se\r\n            } else {\r\n                return this.sw.get(x, y-offset);\r\n            }\r\n        }\r\n    }\r\n\r\n    // create a node one level up, where this node is in the center\r\n    expand() {\r\n        // consider 2x2 case into a 4x4\r\n        // o o o o\r\n        // o x x o\r\n        // o x x o\r\n        // o o o o\r\n        // at level 1 (2x2), we need to generate a border one level down \r\n        // level 0 (1x1) - pad as border\r\n        let n = this.create_tree(0, this.level-1);\r\n        let nw = this.create(n, n, n, this.nw);\r\n        let ne = this.create(n, n, this.ne, n);\r\n        let sw = this.create(n, this.sw, n, n);\r\n        let se = this.create(this.se, n, n, n);\r\n        let expanded = this.create(nw, ne, sw, se);\r\n        return expanded;\r\n    }\r\n}","import { QuadTreeSimulated } from \"./QuadTreeSimulated\";\r\n\r\nclass HashMap {\r\n    constructor() {\r\n        this.map = {};\r\n        this.hits = 0;\r\n        this.misses = 0;\r\n        this.count = 0;\r\n        console.log(this);\r\n    }\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n\r\n    put(key, nw, ne, sw, se, time_compression) {\r\n        let entries = this.map[key];\r\n        if (entries === undefined) {\r\n            let item = new HashLifeNode(nw, ne, sw, se, time_compression);\r\n            this.map[key] = [item];\r\n            this.misses += 1;\r\n            this.count += 1;\r\n            return item;\r\n        }\r\n        for (let entry of entries) {\r\n            if (entry.equals(nw, ne, sw, se, time_compression)) {\r\n                this.hits += 1;\r\n                return entry;\r\n            }\r\n        }\r\n        this.misses += 1;\r\n        this.count += 1;\r\n        let item = new HashLifeNode(nw, ne, sw, se, time_compression);\r\n        entries.push(item);\r\n        return item;\r\n    }\r\n}\r\n\r\nexport class HashLifeNode extends QuadTreeSimulated {\r\n    static HashedNodes = new HashMap();\r\n    static CurrentID = 101;\r\n\r\n    constructor(nw, ne, sw, se, time_compression=false) {\r\n        super(nw, ne, sw, se, time_compression);\r\n        this.address = HashLifeNode.generate_id();\r\n    }\r\n\r\n    equals(nw, ne, sw, se, time_compression) {\r\n        // level 0\r\n        if (ne === undefined) {\r\n            let population = nw;\r\n            return (this.level === 0 && this.population === population);\r\n        }\r\n        // If other levels\r\n        if (nw.level !== this.level-1) {\r\n            return false;\r\n        }\r\n        // Check if neighbours are all the same\r\n        return (\r\n            nw === this.nw &&\r\n            ne === this.ne &&\r\n            sw === this.sw &&\r\n            se === this.se\r\n        );\r\n    }\r\n\r\n    static hash_code(nw, ne, sw, se, time_compression) {\r\n        // level 0\r\n        if (ne === undefined) {\r\n            let population = nw;\r\n            return population;\r\n        } \r\n        // other levels\r\n        return nw.address +\r\n            11 * ne.address + \r\n            101 * sw.address +\r\n            1007 * se.address;\r\n    }\r\n\r\n    // get random number\r\n    static generate_id() {\r\n        let id = HashLifeNode.CurrentID;\r\n        HashLifeNode.CurrentID += 7;\r\n        return id;\r\n    }\r\n\r\n    static put_default_node(nw, ne, sw, se, time_compression) {\r\n        let key = HashLifeNode.hash_code(nw, ne, sw, se, time_compression);\r\n        let stored = HashLifeNode.HashedNodes.put(key, nw, ne, sw, se, time_compression);\r\n        return stored;\r\n    }\r\n\r\n    // override factory method by adding a hash\r\n    create(nw, ne, sw, se) {\r\n        let node = HashLifeNode.put_default_node(nw, ne, sw, se, this.time_compression);\r\n        return node;\r\n    }\r\n\r\n    // override default tree creation to include time compression\r\n    create_tree(alive, level) {\r\n        if (level === 0) {\r\n            return this.create(alive, undefined, undefined, undefined);\r\n        }\r\n        let n = this.create_tree(alive, level-1);\r\n        return this.create(n, n, n, n);\r\n    }\r\n\r\n    static bootstrap(alive, level, time_compression=false) {\r\n        return new HashLifeNode(0, undefined, undefined, undefined, time_compression).create_tree(alive, level);\r\n    }\r\n}\r\n\r\n","import { HashLifeNode } from \"./HashLife\";\r\n\r\nexport class Simulation {\r\n    constructor(initial_level=3, time_compression=false) {\r\n        this.time_compression = time_compression;\r\n        this.root = HashLifeNode.bootstrap(0, initial_level, this.time_compression);\r\n        this.construct_buffer();\r\n    }\r\n\r\n    construct_buffer() {\r\n        // if (this.root.level === this.current_level) {\r\n        //     return;\r\n        // }\r\n        // this.current_level = this.root.level;\r\n        // let dim = (1 << this.root.level);\r\n        // this.shape = [dim, dim];\r\n        // this.count = dim*dim; \r\n        // this.buffer = new Uint8Array(this.count);\r\n        // this.shape = [8, 8];\r\n        this.shape = [1024, 1024];\r\n        this.count = this.shape[0] * this.shape[1];\r\n        this.buffer = new Uint8Array(this.count);\r\n    }\r\n\r\n    randomise(xstart, xend, ystart, yend) {\r\n        if (xstart === undefined) {\r\n            xstart = 0;\r\n            ystart = 0;\r\n            xend = 1 << this.root.level;\r\n            yend = 1 << this.root.level;\r\n        }\r\n        let root = this.randomise_recursive(this.root, xstart, xend, ystart, yend);\r\n        if (root !== this.root) {\r\n            this.update_buffer(root);\r\n        }\r\n        this.root = root;\r\n    }\r\n\r\n    clear(xstart, xend, ystart, yend) {\r\n        if (xstart === undefined) {\r\n            xstart = 0;\r\n            ystart = 0;\r\n            xend = 1 << this.root.level;\r\n            yend = 1 << this.root.level;\r\n        }\r\n        let root = this.fill_recursive(this.root, 0, xstart, xend, ystart, yend);\r\n        if (root !== this.root) {\r\n            this.update_buffer(root);\r\n        }\r\n        this.root = root;\r\n    }\r\n\r\n    fill_recursive(node, state, xstart, xend, ystart, yend, xoff=0, yoff=0) {\r\n        let offset = 1 << (node.level-1);\r\n        let dim = 1 << node.level;\r\n        // ignore\r\n        if (xstart >= dim || ystart >= dim || xend < 0 || yend < 0) {\r\n            return node;\r\n        }\r\n        // single level\r\n        if (node.level === 0) {\r\n            return node.create(state);\r\n        }\r\n        // randomise\r\n        let nw = this.fill_recursive(node.nw, state, xstart               , min(xend, offset-1), ystart               , min(yend, offset-1), xoff       , yoff);\r\n        let ne = this.fill_recursive(node.ne, state, max(0, xstart-offset), xend-offset        , ystart               , min(yend, offset-1), xoff+offset, yoff);\r\n        let sw = this.fill_recursive(node.sw, state, xstart               , min(xend, offset-1), max(0, ystart-offset), yend-offset        , xoff       , yoff+offset);\r\n        let se = this.fill_recursive(node.se, state, max(0, xstart-offset), xend-offset        , max(0, ystart-offset), yend-offset        , xoff+offset, yoff+offset);\r\n        let other = node.create(nw, ne, sw, se);\r\n        return other;\r\n    }\r\n\r\n    randomise_recursive(node, xstart, xend, ystart, yend, xoff=0, yoff=0) {\r\n        let offset = 1 << (node.level-1);\r\n        let dim = 1 << node.level;\r\n        // ignore\r\n        if (xstart >= dim || ystart >= dim || xend < 0 || yend < 0) {\r\n            return node;\r\n        }\r\n        // single level\r\n        if (node.level === 0) {\r\n            let state = (Math.random() > 0.5) ? 1 : 0;\r\n            return node.create(state);\r\n        }\r\n        // randomise\r\n        let nw = this.randomise_recursive(node.nw, xstart               , min(xend, offset-1), ystart               , min(yend, offset-1), xoff       , yoff);\r\n        let ne = this.randomise_recursive(node.ne, max(0, xstart-offset), xend-offset        , ystart               , min(yend, offset-1), xoff+offset, yoff);\r\n        let sw = this.randomise_recursive(node.sw, xstart               , min(xend, offset-1), max(0, ystart-offset), yend-offset        , xoff       , yoff+offset);\r\n        let se = this.randomise_recursive(node.se, max(0, xstart-offset), xend-offset        , max(0, ystart-offset), yend-offset        , xoff+offset, yoff+offset);\r\n        let other = node.create(nw, ne, sw, se);\r\n        return other;\r\n    }\r\n\r\n    step() {\r\n        let root = undefined;\r\n        if (this.root.level >= 8) {\r\n            root = this.wrapped_step(this.root);\r\n        } else {\r\n            root = this.expanding_step(this.root); \r\n        }\r\n\r\n        // this.expanding_step(); \r\n        if (this.root !== root) {\r\n            this.update_buffer(root);\r\n        }\r\n        this.root = root;\r\n    }\r\n\r\n    expanding_step(root) {\r\n        while (true) {\r\n            let [nw, ne, sw, se] = [root.nw, root.ne, root.sw, root.se];\r\n            if (root.level < 3 ||\r\n                nw.population !== nw.se.se.population ||\r\n                ne.population !== ne.sw.sw.population ||\r\n                sw.population !== sw.ne.ne.population ||\r\n                se.population !== se.nw.nw.population)\r\n            {\r\n                root = root.expand();\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return root.get_next_generation();\r\n    }\r\n\r\n    wrapped_step(root) {\r\n        let center = root.get_next_generation();\r\n        let horizontal = root.create(root.ne, root.nw, root.se, root.sw).get_next_generation();\r\n        let vertical = root.create(root.sw, root.se, root.nw, root.ne).get_next_generation();\r\n        let corner = root.create(root.se, root.sw, root.ne, root.nw).get_next_generation();\r\n\r\n        let nw = root.create(corner.se, vertical.sw, horizontal.ne, center.nw);\r\n        let ne = root.create(vertical.se, corner.sw, center.ne, horizontal.nw);\r\n        let sw = root.create(horizontal.se, center.sw, corner.ne, vertical.nw);\r\n        let se = root.create(center.se, horizontal.sw, vertical.ne, corner.nw);\r\n\r\n        return root.create(nw, ne, sw, se);\r\n    }\r\n\r\n    update_buffer(root) {\r\n        // this.construct_buffer();\r\n        this.draw_recursive(root, this.buffer, this.shape, 0, this.shape[0], 0, this.shape[1]);\r\n    }\r\n\r\n    draw_recursive(node, buffer, shape, xstart, xend, ystart, yend, xoff=0, yoff=0) {\r\n        // determine which rects to draw to\r\n        let offset = 1 << (node.level-1);\r\n        let dim = 1 << node.level;\r\n        // console.log(`level=${node.level}, xoff=${xoff}, yoff=${yoff}, x=${xstart}...${xend}, y=${ystart}...${yend}`);\r\n        // ignore\r\n        if (xstart >= dim || ystart >= dim || xend < 0 || yend < 0) {\r\n            return;\r\n        }\r\n        // at base case we expect (x, y) of where to draw the pixel\r\n        // xtart, ystart, xend, yend determine where we write to the buffer\r\n        if (node.level === 0) {\r\n            let state = node.population > 0 ? 255 : 0;\r\n            buffer[(xoff+xstart) + (yoff+ystart)*shape[0]] = state;\r\n            return;\r\n        }\r\n\r\n        this.draw_recursive(node.nw, buffer, shape, xstart               , min(xend, offset-1), ystart               , min(yend, offset-1), xoff       , yoff);\r\n        this.draw_recursive(node.ne, buffer, shape, max(0, xstart-offset), xend-offset        , ystart               , min(yend, offset-1), xoff+offset, yoff);\r\n        this.draw_recursive(node.sw, buffer, shape, xstart               , min(xend, offset-1), max(0, ystart-offset), yend-offset        , xoff       , yoff+offset);\r\n        this.draw_recursive(node.se, buffer, shape, max(0, xstart-offset), xend-offset        , max(0, ystart-offset), yend-offset        , xoff+offset, yoff+offset);\r\n    }\r\n}\r\n\r\nfunction min(x, y) {\r\n    if (x >= y) return y;\r\n    return x;\r\n}\r\n\r\nfunction max(x, y) {\r\n    if (x >= y) return x;\r\n    return y;\r\n}","import { Shader } from '../gl/Shader';\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../gl/VertexBuffer';\r\nimport { Uniform } from '../gl/Uniform';\r\nimport { IndexBuffer } from '../gl/IndexBuffer';\r\n\r\nimport basic_shader from '../shaders/basic';\r\nimport { Renderer } from '../gl/Renderer';\r\nimport { GridRender } from './GridRender';\r\nimport { Simulation } from '../hashlife/Simulation';\r\n\r\nconst quad = {\r\n    vertex_data: new Float32Array([\r\n        -1, -1, \r\n        -1,  1,\r\n            1, -1,\r\n            1,  1\r\n    ]),\r\n    index_data: new Uint32Array([\r\n        0, 3, 1,\r\n        0, 2, 3,\r\n    ])\r\n};\r\n\r\nexport class App {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n\r\n        this.renderer = new Renderer(gl);\r\n        this.shader = new Shader(gl, basic_shader.vertex, basic_shader.frag);\r\n        this.shader.add_uniform('uDataTexture', new Uniform(loc => gl.uniform1i(loc, 0)));\r\n\r\n        this.vbo = new VertexBufferObject(gl, quad.vertex_data, gl.STATIC_DRAW);\r\n        this.ibo = new IndexBuffer(gl, quad.index_data);\r\n        \r\n        let layout = new VertexBufferLayout(gl);\r\n        layout.push_attribute(0, 2, gl.FLOAT, false);\r\n\r\n        this.vao = new VertexArrayObject(gl);\r\n        this.vao.add_vertex_buffer(this.vbo, layout);\r\n\r\n        this.sim = new Simulation(10, true);\r\n        // this.sim.randomise(0, 1 << 10, 0, 1 << 10);\r\n\r\n        this.grid = new GridRender(gl, this.sim.buffer, this.sim.shape);\r\n\r\n        this.steps = 0;\r\n    }\r\n\r\n\r\n    run() {\r\n        requestAnimationFrame(this.loop.bind(this));\r\n    }\r\n\r\n    loop() {\r\n        this.on_update();\r\n        this.on_render();\r\n        requestAnimationFrame(this.loop.bind(this));\r\n    }\r\n\r\n    on_update() {\r\n        if (this.running) {\r\n            this.step();\r\n        }\r\n        if (this.steps > 0) {\r\n            this.step();\r\n            this.steps -= 1;\r\n        }\r\n    }\r\n\r\n    step() {\r\n        this.sim.step();\r\n        this.grid.refresh();\r\n    }\r\n\r\n    clear(xstart, xend, ystart, yend) {\r\n        this.sim.clear(xstart, xend, ystart, yend);\r\n        this.grid.refresh();\r\n    }\r\n\r\n    randomise(xstart, xend, ystart, yend) {\r\n        this.sim.randomise(xstart, xend, ystart, yend);\r\n        this.grid.refresh();\r\n    }\r\n\r\n    on_render() {\r\n        let gl = this.gl;\r\n\r\n        this.shader.bind();\r\n        this.vao.bind();\r\n        this.ibo.bind();\r\n        this.grid.bind();\r\n\r\n        this.renderer.clear();\r\n        this.renderer.draw(this.vao, this.ibo, this.shader);\r\n        // gl.drawElements(gl.TRIANGLES, this.ibo.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}\r\n\r\n","import React, { createRef } from 'react';\nimport { App } from './app/App';\nimport { vec2 } from 'gl-matrix';\n\nexport class AppView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = createRef();\n    this.state = {\n      failed_webgl: false\n    };\n    this.controller = new MouseController();\n  }\n\n  componentDidMount() {\n    let canvas = this.ref.current;\n    let gl = canvas.getContext('webgl2'); \n    if (!gl) {\n      this.setState({...this.state, failed_webgl: true});\n      return;\n    }\n\n    let app = new App(gl);\n    app.run();\n    this.is_randomise = false;\n    this.is_clear = false;\n    this.app = app;\n\n    this.controller.listen_drag(({start, end}) => {\n      let xstart = Math.min(start[0], end[0]);\n      let xend = Math.max(start[0], end[0]);\n      let ystart = Math.min(start[1], end[1]);\n      let yend = Math.max(start[1], end[1]);\n      if (this.is_randomise) {\n        this.app.randomise(xstart, xend, ystart, yend);\n      } else if (this.is_clear) {\n        this.app.clear(xstart, xend, ystart, yend);\n      }\n    })\n  }  \n\n  step() {\n    this.app.steps = 1;\n  }\n\n  toggle() {\n    this.app.running = !this.app.running;\n  }\n\n  on_mouse_down(ev) {\n    this.controller.on_mouse_down(ev);\n    switch (ev.button) {\n      case 0: this.is_randomise = true; break;\n      case 2: this.is_clear = true; break;\n    }\n  }\n\n  on_mouse_move(ev) {\n\n  }\n\n  on_mouse_up(ev) {\n    this.controller.on_mouse_up(ev);\n    this.is_randomise = false;\n    this.is_clear = false;\n    ev.preventDefault();\n  }\n\n  clear(ev) {\n    this.app.clear();\n  }\n\n  randomise(ev) {\n    this.app.randomise();\n  }\n\n  render() {\n    if (this.state.failed_webgl) {\n      return <div>Requires WebGL2 Support</div>\n    }\n\n    return (\n      <div>\n        <div>\n          <button onClick={ev => this.clear()}>Clear</button>\n          <button onClick={ev => this.step()}>Step</button>\n          <button onClick={ev => this.toggle()}>Toggle</button>\n          <button onClick={ev => this.randomise()}>Randomise</button>\n        </div>\n        <canvas width={1024} height={1024} ref={this.ref}\n                onMouseDown={ev => this.on_mouse_down(ev)}\n                onMouseMove={ev => this.on_mouse_move(ev)}\n                onMouseUp={ev => this.on_mouse_up(ev)}></canvas>\n      </div>\n    );\n  }\n}\n\nclass MouseController {\n  constructor() {\n    this.drag_start = vec2.create();\n    this.drag_end = vec2.create();\n    this.drag_listeners = new Set();\n  }\n  \n  listen_drag(list) {\n    this.drag_listeners.add(list);\n  }\n\n  on_mouse_down(ev) {\n    this.drag_start = vec2.fromValues(ev.clientX, ev.clientY);\n  }\n\n  on_mouse_up(ev) {\n    this.drag_end = vec2.fromValues(ev.clientX, ev.clientY);\n    for (let list of this.drag_listeners) {\n      list({start:this.drag_start, end:this.drag_end});\n    }\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AppView } from './AppView';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppView/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}