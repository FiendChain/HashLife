{"version":3,"sources":["gl/Shader.js","gl/VertexBuffer.js","gl/Uniform.js","gl/IndexBuffer.js","shaders/basic.js","gl/Renderer.js","gl/Texture2D.js","gl/FrameBuffer.js","app/GridRender.js","hashlife/BasicFactory.js","hashlife/SimulatedFactory.js","hashlife/HashedFactory.js","hashlife/Simulation.js","app/App.js","AppView.js","index.js"],"names":["Shader","gl","vertex_shader_src","fragment_shader_src","this","create_shader_program","uniforms","locations","vertex_shader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","prepend_line_numbers","Error","fragment_shader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","create_program","name","uniform","location","getUniformLocation","push","useProgram","i","length","apply","src","split","map","v","join","VertexBufferObject","data","usage","vbo","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","VertexArrayObject","vao","createVertexArray","integer_types","Set","INT","UNSIGNED_INT","layout","bind","offset","attributes","attribute","enableVertexAttribArray","index","has","type","vertexAttribIPointer","count","is_normalised","stride","vertexAttribPointer","size","bindVertexArray","VertexBufferLayout","sizeof","VertexBufferAttribute","start","end","slice","FLOAT","Uniform","callback","IndexBuffer","buffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","Renderer","clear_colour","Float32Array","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","vertex_array","index_buffer","shader","drawElements","TRIANGLES","Texture2D","shape","texture","createTexture","texParameteri","TEXTURE_2D","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","pixelStorei","UNPACK_ALIGNMENT","texImage2D","R8","RED","UNSIGNED_BYTE","bindTexture","slot","activeTexture","TEXTURE0","FrameBuffer","fb","createFramebuffer","texture2D","framebufferTexture2D","FRAMEBUFFER","COLOR_ATTACHMENT0","unbind","bindFramebuffer","GridRender","data_texture","frame_buffer","attach_texture2D","texSubImage2D","active","Node","nw","ne","sw","se","undefined","population","level","BasicFactory","alive","create","n","create_tree","node","x","y","set","get","SimulatedNode","result","SimulatedFactory","time_compression","west","east","north","south","slow_simulation","n00","n01","create_horizontal","n02","n10","create_vertical","n11","create_center","n12","n20","n21","n22","get_next_generation","bits","one_generation","self","neighbours","HashedNode","address","generate_id","id","CurrentID","HashedFactory","hits","misses","key","hash_code","nodes","create_instance","equals","Simulation","initial_level","factory","root","construct_buffer","dim","Uint8Array","xstart","xend","ystart","yend","randomise_recursive","update_buffer","fill_recursive","state","xoff","yoff","min","max","other","Math","random","wrapped_step","expanding_step","expand","center","horizontal","vertical","corner","new_root","old_root","draw_recursive","old","quad","vertex_data","index_data","Uint32Array","App","compressed","renderer","basic_shader","add_uniform","loc","uniform1i","ibo","push_attribute","add_vertex_buffer","sim","grid","steps","listeners","listener","add","requestAnimationFrame","loop","on_update","on_render","running","step","refresh","notify","map_relative_to_abs_coords","randomise","draw","AppView","props","ref","createRef","failed_webgl","controller","MouseController","current","getContext","app","run","is_randomise","is_clear","listen","stats","setTimeout","on_stats","listen_drag","setState","ev","on_mouse_down","button","on_mouse_up","preventDefault","className","render_controls","render_settings","render_stats","width","height","onMouseDown","onMouseMove","on_mouse_move","onMouseUp","onClick","toggle","onSubmit","update_settings","checked","onChange","target","value","React","Component","drag_start","vec2","drag_end","drag_listeners","list","rect","getBoundingClientRect","clientX","left","clientY","top","fromValues","get_position","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9773acb.chunk.js","sourcesContent":["export class Shader {\r\n  constructor(gl, vertex_shader_src, fragment_shader_src) {\r\n    this.gl = gl;\r\n    this.create_shader_program(vertex_shader_src, fragment_shader_src);\r\n    this.uniforms = []; \r\n    this.locations = [];\r\n  }\r\n\r\n  create_shader_program(vertex_shader_src, fragment_shader_src) {\r\n    [this.vertex_shader, this.fragment_shader, this.program] = create_program(this.gl, vertex_shader_src, fragment_shader_src); \r\n  }\r\n\r\n  // add to list of uniforms permanently binded to shader\r\n  add_uniform(name, uniform) {\r\n    let gl = this.gl;\r\n    let location = gl.getUniformLocation(this.program, name);\r\n    if (location === null) {\r\n      // console.warn(`Couldn't find location of uniform ${name}`);\r\n      // throw new Error(`Couldn't find location of uniform ${name}`);\r\n    } \r\n    this.uniforms.push(uniform);\r\n    this.locations.push(location);\r\n  }\r\n\r\n  // dynamic sub in uniform\r\n  // apply_uniform(name, uniform) {\r\n  //   let gl = this.gl;\r\n  //   this.bind();\r\n  //   let location = gl.getUniformLocation(this.program, name);\r\n  //   uniform.apply(location);\r\n  // }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.useProgram(this.program);\r\n    for (let i = 0; i < this.uniforms.length; i++) {\r\n      let uniform = this.uniforms[i];\r\n      let location = this.locations[i];\r\n      if (location === null) {\r\n        continue;\r\n      }\r\n      uniform.apply(location);\r\n    }\r\n  }\r\n}\r\n\r\nfunction create_program(gl, vertex_shader_src, fragment_shader_src) {\r\n  const vertex_shader = gl.createShader(gl.VERTEX_SHADER);\r\n  gl.shaderSource(vertex_shader, vertex_shader_src);\r\n  gl.compileShader(vertex_shader);\r\n  if (!gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(vertex_shader));\r\n    console.error(prepend_line_numbers(vertex_shader_src));\r\n    throw new Error('Unable to compile vertex shader');\r\n  }\r\n\r\n  const fragment_shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n  gl.shaderSource(fragment_shader, fragment_shader_src);\r\n  gl.compileShader(fragment_shader);\r\n  if (!gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS)) {\r\n    console.error(gl.getShaderInfoLog(fragment_shader));\r\n    throw new Error('Unable to compile fragment shader');\r\n  }\r\n\r\n  const program = gl.createProgram();\r\n  gl.attachShader(program, vertex_shader);\r\n  gl.attachShader(program, fragment_shader);\r\n  gl.linkProgram(program);\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    console.error(gl.getProgramInfoLog(program));\r\n    console.error(prepend_line_numbers(fragment_shader_src));\r\n    throw new Error('Unable to construct shader program');\r\n  }\r\n\r\n  return [vertex_shader, fragment_shader, program];\r\n}\r\n\r\nfunction prepend_line_numbers(src) {\r\n  let lines = src.split('\\n').map((v, i) => `${i+1}\\t| ${v}`);\r\n  let out = lines.join('\\n');\r\n  return out;\r\n}","// 1D array containing n elements\r\n// can contain arbitary data\r\nexport class VertexBufferObject {\r\n  constructor(gl, data, usage) {\r\n    this.gl = gl;\r\n\r\n    this.data = data;\r\n\r\n    this.vbo = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n    gl.bufferData(gl.ARRAY_BUFFER, data, usage);\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n  }\r\n}\r\n\r\nexport class VertexArrayObject {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.vao = gl.createVertexArray();\r\n    this.integer_types = new Set([gl.INT, gl.UNSIGNED_INT]);\r\n  }\r\n\r\n  add_vertex_buffer(vbo, layout) {\r\n    let gl = this.gl;\r\n\r\n    this.bind();\r\n    vbo.bind();\r\n\r\n    let offset = 0;\r\n    for (let attribute of layout.attributes) {\r\n      gl.enableVertexAttribArray(attribute.index);\r\n      if (this.integer_types.has(attribute.type)) {\r\n        gl.vertexAttribIPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      } else {\r\n        gl.vertexAttribPointer(attribute.index, attribute.count, attribute.type, attribute.is_normalised, layout.stride, offset);\r\n      }\r\n      offset += attribute.count * attribute.size;\r\n    }\r\n  }\r\n\r\n  bind() {\r\n    let gl = this.gl;\r\n    gl.bindVertexArray(this.vao);\r\n  }\r\n}\r\n\r\nexport class VertexBufferLayout {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.stride = 0;\r\n    this.attributes = [];\r\n  }\r\n\r\n  push_attribute(index, count, type, is_normalised) {\r\n    let size = this.sizeof(type);\r\n    let attribute = new VertexBufferAttribute(index, count, type, is_normalised, size);\r\n    this.attributes.push(attribute);\r\n    this.stride += count * size;\r\n  }\r\n\r\n  slice(start, end) {\r\n    let layout = new VertexBufferLayout();\r\n    layout.stride = this.stride;\r\n    layout.attributes = this.attributes.slice(start, end);\r\n    return layout;\r\n  }\r\n\r\n  sizeof(type) {\r\n    let gl = this.gl;\r\n\r\n    switch (type) {\r\n    case gl.FLOAT: return 4;\r\n    case gl.UNSIGNED_INT: return 4;\r\n    case gl.INT: return 4;\r\n    default: throw new Error(`Unknown element type: ${type}`);\r\n    }\r\n  }\r\n}\r\n\r\n// each element in the shader has an attribute index\r\n// layout(location = <attribute_index>) in vec3 position;\r\n// layout(locaiton = <attribute_index>) in vec3 normal;\r\nclass VertexBufferAttribute {\r\n  constructor(index, count, type, is_normalised, size) {\r\n    this.index = index;\r\n    this.count = count;\r\n    this.type = type;\r\n    this.is_normalised = is_normalised;\r\n    this.size = size;\r\n  }\r\n\r\n  \r\n}","export class UniformMat4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n       this.gl.uniformMatrix4fv(location, false, this.data);\r\n    }\r\n}\r\n\r\nexport class UniformVec3f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform3f(location, this.data[0], this.data[1], this.data[2]);\r\n    }\r\n}\r\n\r\nexport class UniformVec4f {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n    }\r\n\r\n    apply(location) {\r\n        this.gl.uniform4f(location, this.data[0], this.data[1], this.data[2], this.data[3]);\r\n    }\r\n}\r\n\r\nexport class Uniform {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    apply(location) {\r\n        this.callback(location);\r\n    }\r\n}","export class IndexBuffer {\r\n    constructor(gl, data) {\r\n        this.gl = gl;\r\n\r\n        this.buffer = gl.createBuffer();\r\n        this.count = data.length;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer); \r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW); // gluint is 4 bytes\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);\r\n    }\r\n}","const vertex = \r\n`#version 300 es\r\nprecision mediump float;\r\n\r\nin vec2 position;\r\n\r\nout vec2 vPosition;\r\n\r\nvoid main() {\r\n    vPosition = vec2((position.x+1.0)/2.0, (-position.y+1.0)/2.0);\r\n    gl_Position = vec4(position.x, position.y, 0.0, 1.0);\r\n}`;\r\n\r\nconst frag = \r\n`#version 300 es\r\nprecision mediump float;\r\nprecision highp sampler2D;\r\n\r\nin vec2 vPosition;\r\n\r\nout vec4 FragColour;\r\n\r\nuniform sampler2D uDataTexture;\r\n\r\nvoid main() {\r\n    vec4 cell = texture(uDataTexture, vPosition);\r\n    float state = 1.0-cell[0];\r\n    FragColour = vec4(state, state, state, 1.0);\r\n    // FragColour = vec4(vPosition.x, vPosition.y, 1.0, 1.0);\r\n}`;\r\n\r\nexport default {vertex: vertex, frag: frag};","export class Renderer {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.clear_colour = new Float32Array([1, 1, 1, 1]);\r\n    }\r\n\r\n    clear() {\r\n        let gl = this.gl;\r\n        gl.clearColor(...this.clear_colour);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    draw(vertex_array, index_buffer, shader) {\r\n        let gl = this.gl;\r\n\r\n        shader.bind();\r\n        vertex_array.bind();\r\n        index_buffer.bind();\r\n\r\n        gl.drawElements(gl.TRIANGLES, index_buffer.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}","export class Texture2D {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n        this.data = data;\r\n        this.shape = shape;\r\n        this.texture = gl.createTexture();\r\n\r\n        this.bind();\r\n        // The R32F type works only with gl.RED and gl.FLOAT\r\n        // https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.R8, shape[0], shape[1], 0, gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n        // gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, shape[0], shape[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    }\r\n\r\n    active(slot=0) {\r\n        let gl = this.gl;\r\n        this.bind();\r\n        gl.activeTexture(gl.TEXTURE0 + slot);\r\n    }\r\n}","export class FrameBuffer {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n        this.fb = gl.createFramebuffer();\r\n    }\r\n\r\n    attach_texture2D(texture2D) {\r\n        let gl = this.gl;\r\n        let texture = texture2D.texture;\r\n        this.bind();\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n        this.unbind();\r\n    }\r\n\r\n    bind() {\r\n        let gl = this.gl;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.fb);\r\n    }\r\n\r\n    unbind() {\r\n        let gl = this.gl;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n\r\n}","import { Texture2D } from '../gl/Texture2D';\r\nimport { FrameBuffer } from '../gl/FrameBuffer';\r\n\r\nexport class GridRender {\r\n    constructor(gl, data, shape) {\r\n        this.gl = gl;\r\n\r\n        this.shape = shape;\r\n        this.data = data;\r\n        this.count = shape[0]*shape[1];\r\n\r\n        this.data_texture = new Texture2D(gl, this.data, this.shape);\r\n        this.frame_buffer = new FrameBuffer(gl);\r\n        this.frame_buffer.attach_texture2D(this.data_texture);\r\n    }\r\n\r\n    refresh() {\r\n        let gl = this.gl;\r\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.shape[0], this.shape[1], gl.RED, gl.UNSIGNED_BYTE, this.data);\r\n    }\r\n\r\n    bind() {\r\n        // this.frame_buffer.bind();\r\n        // this.data_texture.bind();\r\n        // // gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);\r\n        // // gl.viewport(0, 0, 800, 800);\r\n        // gl.drawBuffers([gl.COLOR_ATTACHMENT0]);\r\n        // // // gl.drawPixels(this.shape[0], this.shape[1], gl.UNSIGNED_BYTE, this.data);\r\n        // this.frame_buffer.unbind();\r\n\r\n        this.data_texture.active(0);\r\n    }\r\n}","export class Node {\r\n    constructor(nw, ne, sw, se) {\r\n        if (ne === undefined) {\r\n            this.population = nw;\r\n            this.level = 0;\r\n            return;\r\n        }\r\n\r\n        this.nw = nw;\r\n        this.ne = ne;\r\n        this.sw = sw;\r\n        this.se = se;\r\n\r\n        this.level = this.nw.level + 1;\r\n        this.population = nw.population + ne.population + sw.population + se.population;\r\n    }\r\n}\r\n\r\nexport class BasicFactory {\r\n    // factory methods\r\n    // allows for overriding to perform intermediate hashing\r\n    create(nw, ne, sw, se) {\r\n        return new Node(nw, ne, sw, se);\r\n    }\r\n\r\n    create_tree(alive, level) {\r\n        if (level === 0) {\r\n            return this.create(alive);\r\n        }\r\n        let n = this.create_tree(alive, level-1);\r\n        return this.create(n, n, n, n);\r\n    }\r\n\r\n    set(node, x, y, alive) {\r\n        if (node.level === 0) {\r\n            return this.create(alive);\r\n        }\r\n        // quad tree (x, y)\r\n        // centre of quad tree is (0, 0)\r\n        // return a new quad tree at this level\r\n        // consider a 4x4 node (level 2)\r\n        // level 2               level 1             level 0\r\n        //   0 1 2 3          0 1 0 1         - - - -\r\n        // 0 a a b b    ==> 0 a a b b   ==> - a a b b   \r\n        // 1 a a b b        1 a a b b       - a a b b\r\n        // 2 c c d d        0 c c d d       - c c d d\r\n        // 3 c c d d        1 c c d d       - c c d d    \r\n\r\n        let offset = 1 << (node.level-1);\r\n        let [nw, ne, sw, se] = [\r\n            node.nw, node.ne, \r\n            node.sw, node.se];\r\n\r\n        if (x >= offset) {\r\n            // nw\r\n            if (y < offset) {\r\n                nw = this.set(nw, x-offset, y, alive);\r\n            // sw\r\n            } else {\r\n                sw = this.set(se, x-offset, y-offset, alive);\r\n            }\r\n        } else {\r\n            // ne\r\n            if (y < offset) {\r\n                ne = this.set(ne, x, y, alive);\r\n            // se\r\n            } else {\r\n                se = this.set(se, x, y-offset, alive);\r\n            }\r\n        }\r\n\r\n        return this.create(nw, ne, sw, se);\r\n    }\r\n\r\n    get(node, x, y) {\r\n        if (node.level === 0) {\r\n            return node.population;\r\n        }\r\n        let offset = 1 << (node.level-1);\r\n        if (x >= offset) {\r\n            // nw\r\n            if (y < offset) {\r\n                return this.get(node.ne, x-offset, y);\r\n            // sw\r\n            } else {\r\n                return this.get(node.se, x-offset, y-offset);\r\n            }\r\n        } else {\r\n            // ne\r\n            if (y < offset) {\r\n                return this.get(node.nw, x, y);\r\n            // se\r\n            } else {\r\n                return this.get(node.sw, x, y-offset);\r\n            }\r\n        }\r\n    }\r\n\r\n    // create a node one level up, where this node is in the center\r\n    expand(node) {\r\n        // consider 2x2 case into a 4x4\r\n        // o o o o\r\n        // o x x o\r\n        // o x x o\r\n        // o o o o\r\n        // at level 1 (2x2), we need to generate a border one level down \r\n        // level 0 (1x1) - pad as border\r\n        let n = this.create_tree(0, node.level-1);\r\n        let nw = this.create(n, n, n, node.nw);\r\n        let ne = this.create(n, n, node.ne, n);\r\n        let sw = this.create(n, node.sw, n, n);\r\n        let se = this.create(node.se, n, n, n);\r\n        let expanded = this.create(nw, ne, sw, se);\r\n        return expanded;\r\n    }\r\n}","import { Node, BasicFactory } from \"./BasicFactory\";\r\n\r\nexport class SimulatedNode extends Node {\r\n    constructor(nw, ne, sw, se) {\r\n        super(nw, ne, sw, se);\r\n        this.result = null;\r\n    }\r\n}\r\n\r\nexport class SimulatedFactory extends BasicFactory {\r\n    constructor(time_compression) {\r\n        super();\r\n        this.time_compression = time_compression;\r\n    }\r\n\r\n    create(nw, ne, sw, se) {\r\n        return SimulatedNode(nw, ne, sw, se);\r\n    }\r\n\r\n    create_horizontal(west, east) {\r\n        //  1 1 1 1 2 2 2 2\r\n        //  1 1 1 1 2 2 2 2\r\n        //  1 1 1 1 2 2 2 2\r\n        //  1 1 1 1 2 2 2 2\r\n        return this.create(west.ne, east.nw, west.se, east.sw);\r\n    }\r\n\r\n    create_vertical(north, south) {\r\n        // 1 1 1 1\r\n        // 1 1 1 1\r\n        // 1 1 1 1\r\n        // 1 1 1 1\r\n        // 2 2 2 2\r\n        // 2 2 2 2\r\n        // 2 2 2 2\r\n        // 2 2 2 2\r\n        return this.create(north.sw, north.se, south.nw, south.ne);\r\n    }\r\n\r\n    create_center(node) {\r\n        return this.create(\r\n            node.nw.se, node.ne.sw, \r\n            node.sw.ne, node.se.nw);\r\n    }\r\n\r\n    // current node can only determine centered subnode 1 level down\r\n    get_next_generation(node) {\r\n        // if result cached, just send\r\n        if (node.result !== null) {\r\n            return node.result;\r\n        }\r\n        // empty then ignore\r\n        if (node.population === 0) {\r\n            node.result = node.nw;\r\n            return node.result;\r\n        }\r\n        // if at level 2 (4x4), we can perform a the slow simulation\r\n        if (node.level === 2) {\r\n            node.result = this.slow_simulation(node);\r\n            return node.result;\r\n        }\r\n        // consider a level 3 node\r\n        // this would be 8x8\r\n        // we want to return a level 2 node centred\r\n        // this would be 4x4\r\n        //    0 1 2 3 | 4 5 6 7\r\n        //\r\n        // 0  o o o o | o o o o\r\n        // 1  o 1 1 2 | 2 3 3 o\r\n        // 2  o 1 1 2 | 2 3 3 o\r\n        // 3  o 4 4 5 | 5 6 6 o\r\n        //    --------|--------\r\n        // 4  o 4 4 5 | 5 6 6 o\r\n        // 5  o 7 7 8 | 8 9 9 o\r\n        // 6  o 7 7 8 | 8 9 9 o\r\n        // 7  o o o o | o o o o\r\n        // \r\n        // we get the 9 (2x2) matrixes and iterate one generation\r\n        // we get the results from these matrixes, and cluster then into 4 4x2 matrixes\r\n        // we get iterate on generation forward\r\n        //    0 1 2 3 | 4 5 6 7\r\n        //\r\n        // 0  o o o o | o o o o\r\n        // 1  o o o o | o o o o\r\n        // 2  o o 1 1 | 2 2 o o\r\n        // 3  o o 1 1 | 2 2 o o\r\n        //    --------|--------\r\n        // 4  o o 3 3 | 4 4 o o\r\n        // 5  o o 3 3 | 4 4 o o\r\n        // 6  o o o o | o o o o\r\n        // 7  o o o o | o o o o\r\n        // we combine these matrixes and get one generation ahead once more\r\n        // this gives us an output matrix that is 3 generations ahead\r\n        // label these matrixes as\r\n        //   0 1 2\r\n        // 0 x x x\r\n        // 1 x x x\r\n        // 2 x x x\r\n        let n00 = node.nw; \r\n        let n01 = this.create_horizontal(node.nw, node.ne);\r\n        let n02 = node.ne; \r\n\r\n        let n10 = this.create_vertical(node.nw, node.sw); \r\n        let n11 = this.create_center(node);\r\n        let n12 = this.create_vertical(node.ne, node.se); \r\n\r\n        let n20 = node.sw; \r\n        let n21 = this.create_horizontal(node.sw, node.se);\r\n        let n22 = node.se; \r\n\r\n        // temporal compression\r\n        if (this.time_compression) {\r\n            n00 = this.get_next_generation(n00);\r\n            n01 = this.get_next_generation(n01);\r\n            n02 = this.get_next_generation(n02);\r\n            n10 = this.get_next_generation(n10);\r\n            n11 = this.get_next_generation(n11);\r\n            n12 = this.get_next_generation(n12);\r\n            n20 = this.get_next_generation(n20);\r\n            n21 = this.get_next_generation(n21);\r\n            n22 = this.get_next_generation(n22);\r\n        } else {\r\n            n00 = this.create_center(n00);\r\n            n01 = this.create_center(n01);\r\n            n02 = this.create_center(n02);\r\n            n10 = this.create_center(n10);\r\n            n11 = this.create_center(n11);\r\n            n12 = this.create_center(n12);\r\n            n20 = this.create_center(n20);\r\n            n21 = this.create_center(n21);\r\n            n22 = this.create_center(n22);\r\n        }\r\n\r\n        // quads from these\r\n        let nw = this.create(n00, n01, n10, n11);\r\n        let ne = this.create(n01, n02, n11, n12);\r\n        let sw = this.create(n10, n11, n20, n21);\r\n        let se = this.create(n11, n12, n21, n22);\r\n\r\n        nw = this.get_next_generation(nw);\r\n        ne = this.get_next_generation(ne);\r\n        sw = this.get_next_generation(sw);\r\n        se = this.get_next_generation(se);\r\n\r\n        // stitch results into a central quad\r\n        node.result = this.create(nw, ne, sw, se);\r\n        return node.result;\r\n    }\r\n\r\n    // take in a 4x4 node\r\n    // return the centered 2x2 node one generation ahead\r\n    // get next state of 5th cell\r\n    // this would be (x, y) = (2, 2)\r\n    //      0  1  2  3\r\n    //   | -----------\r\n    // 0 |  0  1  2  3  \r\n    // 1 |  4  5  6  7\r\n    // 2 |  8  9 10 11\r\n    // 3 | 12 13 14 15\r\n    // we only consider centre (2x2)\r\n    // this would be bits 10, 9, 6, 5\r\n    slow_simulation(node) {\r\n        let bits = 0;\r\n        // store the 4x4 data inside a 16bit value\r\n        for (let x = 0; x < 4; x++) {\r\n            for (let y = 0; y < 4; y++) {\r\n                // bits = (bits << 1) + this.get(x, y);\r\n                bits |= this.get(node, x, y) << (x + y*4);\r\n            }\r\n        }\r\n        // debug_out(bits);\r\n        let nw = this.create(this.one_generation(bits >> 0)); // bit 10\r\n        let ne = this.create(this.one_generation(bits >> 1)); // bit 9\r\n        let sw = this.create(this.one_generation(bits >> 4)); // bit 6\r\n        let se = this.create(this.one_generation(bits >> 5)); // bit 5\r\n        let res = this.create(nw, ne, sw, se);\r\n        // debug_2x2(res);\r\n        return res;\r\n    }\r\n\r\n    // we make the assumption that the cell we calculate is bit 5\r\n    // we ignore the following bits\r\n    // 0000 0111 0101 0111\r\n    // 0x0757\r\n    one_generation(bits) {\r\n        if (bits === 0) \r\n            return 0;\r\n\r\n        let self = (bits >> 5) & 1;\r\n        bits &= 0x757;\r\n        let neighbours = 0;\r\n        while (bits !== 0) {\r\n            neighbours++;\r\n            // max of 8 neighbours\r\n            // b-1            => b & (b-1) \r\n            //                   0111 0101 0111\r\n            // 0111 0101 0110 => 0111 0101 0110\r\n            // 0111 0101 0101 => 0111 0101 0100\r\n            // 0111 0101 0011 => 0111 0101 0000\r\n            // 0111 0100 1111 => 0111 0100 0000\r\n            // etc\r\n            bits &= bits-1; // remove last bit\r\n        }\r\n        if (neighbours === 3 || (neighbours === 2 && self !== 0)) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}","import { SimulatedNode, SimulatedFactory } from './SimulatedFactory';\r\n\r\nclass HashedNode extends SimulatedNode {\r\n    static CurrentID = 101;\r\n    constructor(nw, ne, sw, se) {\r\n        super(nw, ne, sw, se);\r\n        this.address = HashedNode.generate_id();\r\n    }\r\n\r\n    static generate_id() {\r\n        let id = HashedNode.CurrentID;\r\n        HashedNode.CurrentID += 7;\r\n        return id;\r\n    }\r\n    \r\n    // equality check for map\r\n    equals(nw, ne, sw, se) {\r\n        // level 0\r\n        if (ne === undefined) {\r\n            let population = nw;\r\n            return (this.level === 0 && this.population === population);\r\n        }\r\n        // quick level check\r\n        if (nw.level !== this.level-1) {\r\n            return false;\r\n        }\r\n        // Check if neighbours are all the same\r\n        return (\r\n            nw === this.nw &&\r\n            ne === this.ne &&\r\n            sw === this.sw &&\r\n            se === this.se\r\n        );\r\n    }\r\n}\r\n\r\nexport class HashedFactory extends SimulatedFactory {\r\n    constructor(time_compression) {\r\n        super(time_compression);\r\n        this.map = {};\r\n        this.hits = 0;\r\n        this.misses = 0;\r\n        this.count = 0;\r\n    }\r\n\r\n    create_instance(nw, ne, sw, se) {\r\n        // if we have separate instances it could possibly reduce mem footprint\r\n        // different classes for parent node, and base (level 0)\r\n        return new HashedNode(nw, ne, sw, se);\r\n    }\r\n\r\n    // override creation\r\n    // use hashmap (this is the basis for hashlife)\r\n    // we use recursive algorithms specifically for better hashing\r\n    create(nw, ne, sw, se) {\r\n        let key = this.hash_code(nw, ne, sw, se);\r\n        let nodes = this.map[key];\r\n\r\n        if (nodes == undefined) {\r\n            let node = this.create_instance(nw, ne, sw, se);\r\n            this.map[key] = [node];\r\n            this.misses += 1;\r\n            this.count += 1;\r\n            return node;\r\n        }\r\n\r\n        for (let node of nodes) {\r\n            if (node.equals(nw, ne, sw, se)) {\r\n                this.hits += 1;\r\n                return node;\r\n            }\r\n        }\r\n\r\n        this.misses += 1;\r\n        this.count += 1;\r\n        let node = this.create_instance(nw, ne, sw, se);\r\n        nodes.push(node);\r\n        return node;\r\n    }\r\n\r\n\r\n    clear() {\r\n        this.map = {};\r\n    }\r\n\r\n    hash_code(nw, ne, sw, se) {\r\n        // level 0\r\n        if (ne === undefined) {\r\n            let population = nw;\r\n            return population;\r\n        } \r\n        // other levels\r\n        return nw.address +\r\n            11 * ne.address + \r\n            101 * sw.address +\r\n            1007 * se.address;\r\n    }\r\n}","// import { HashLifeNode } from \"./HashLife\";\r\nimport { HashedFactory } from \"./HashedFactory\";\r\n\r\nexport class Simulation {\r\n    constructor(initial_level=3, time_compression=false) {\r\n        this.factory = new HashedFactory(time_compression);\r\n        this.root = this.factory.create_tree(0, initial_level);\r\n        this.construct_buffer(initial_level);\r\n    }\r\n\r\n    construct_buffer(level) {\r\n        let dim = (1 << level);\r\n        this.shape = [dim, dim];\r\n        this.count = dim*dim;\r\n        this.buffer = new Uint8Array(this.count);\r\n    }\r\n\r\n    randomise(xstart, xend, ystart, yend) {\r\n        if (xstart === undefined) {\r\n            xstart = 0;\r\n            ystart = 0;\r\n            xend = 1 << this.root.level;\r\n            yend = 1 << this.root.level;\r\n        }\r\n        let root = this.randomise_recursive(this.root, xstart, xend, ystart, yend);\r\n        this.update_buffer(root, this.root);\r\n        this.root = root;\r\n    }\r\n\r\n    // map from 0 to 1.0 to 0 to width\r\n    // relative: [0, 1.0]\r\n    // absolute: [0, width] or [0, height\r\n    map_relative_to_abs_coords(x, y) {\r\n        let cX = x * this.shape[0];\r\n        let cY = y * this.shape[1];\r\n        return [cX, cY];\r\n    }\r\n\r\n    clear(xstart, xend, ystart, yend) {\r\n        if (xstart === undefined) {\r\n            xstart = 0;\r\n            ystart = 0;\r\n            xend = 1 << this.root.level;\r\n            yend = 1 << this.root.level;\r\n        }\r\n        let root = this.fill_recursive(this.root, 0, xstart, xend, ystart, yend);\r\n        this.update_buffer(root, this.root);\r\n        this.root = root;\r\n    }\r\n\r\n    fill_recursive(node, state, xstart, xend, ystart, yend, xoff=0, yoff=0) {\r\n        let offset = 1 << (node.level-1);\r\n        let dim = 1 << node.level;\r\n        // ignore\r\n        if (xstart >= dim || ystart >= dim || xend < 0 || yend < 0) {\r\n            return node;\r\n        }\r\n        // single level\r\n        if (node.level === 0) {\r\n            return this.factory.create(state);\r\n        }\r\n        // randomise\r\n        let nw = this.fill_recursive(node.nw, state, xstart               , min(xend, offset-1), ystart               , min(yend, offset-1), xoff       , yoff);\r\n        let ne = this.fill_recursive(node.ne, state, max(0, xstart-offset), xend-offset        , ystart               , min(yend, offset-1), xoff+offset, yoff);\r\n        let sw = this.fill_recursive(node.sw, state, xstart               , min(xend, offset-1), max(0, ystart-offset), yend-offset        , xoff       , yoff+offset);\r\n        let se = this.fill_recursive(node.se, state, max(0, xstart-offset), xend-offset        , max(0, ystart-offset), yend-offset        , xoff+offset, yoff+offset);\r\n        let other = this.factory.create(nw, ne, sw, se);\r\n        return other;\r\n    }\r\n\r\n    randomise_recursive(node, xstart, xend, ystart, yend, xoff=0, yoff=0) {\r\n        let offset = 1 << (node.level-1);\r\n        let dim = 1 << node.level;\r\n        // ignore\r\n        if (xstart >= dim || ystart >= dim || xend < 0 || yend < 0) {\r\n            return node;\r\n        }\r\n        // single level\r\n        if (node.level === 0) {\r\n            let state = (Math.random() > 0.5) ? 1 : 0;\r\n            return this.factory.create(state);\r\n        }\r\n        // randomise\r\n        let nw = this.randomise_recursive(node.nw, xstart               , min(xend, offset-1), ystart               , min(yend, offset-1), xoff       , yoff);\r\n        let ne = this.randomise_recursive(node.ne, max(0, xstart-offset), xend-offset        , ystart               , min(yend, offset-1), xoff+offset, yoff);\r\n        let sw = this.randomise_recursive(node.sw, xstart               , min(xend, offset-1), max(0, ystart-offset), yend-offset        , xoff       , yoff+offset);\r\n        let se = this.randomise_recursive(node.se, max(0, xstart-offset), xend-offset        , max(0, ystart-offset), yend-offset        , xoff+offset, yoff+offset);\r\n        let other = this.factory.create(nw, ne, sw, se);\r\n        return other;\r\n    }\r\n\r\n    step() {\r\n        let root = undefined;\r\n        if (this.root.level >= 8) {\r\n            root = this.wrapped_step(this.root);\r\n        } else {\r\n            root = this.expanding_step(this.root); \r\n        }\r\n\r\n        // this.expanding_step(); \r\n        this.update_buffer(root, this.root);\r\n        this.root = root;\r\n    }\r\n\r\n    expanding_step(root) {\r\n        while (true) {\r\n            let [nw, ne, sw, se] = [root.nw, root.ne, root.sw, root.se];\r\n            if (root.level < 3 ||\r\n                nw.population !== nw.se.se.population ||\r\n                ne.population !== ne.sw.sw.population ||\r\n                sw.population !== sw.ne.ne.population ||\r\n                se.population !== se.nw.nw.population)\r\n            {\r\n                root = this.factory.expand(root);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return this.factory.get_next_generation(root);\r\n    }\r\n\r\n    wrapped_step(root) {\r\n        let center = this.factory.get_next_generation(root);\r\n        let horizontal = this.factory.create(root.ne, root.nw, root.se, root.sw);\r\n        let vertical = this.factory.create(root.sw, root.se, root.nw, root.ne);\r\n        let corner = this.factory.create(root.se, root.sw, root.ne, root.nw);\r\n\r\n        horizontal = this.factory.get_next_generation(horizontal);\r\n        vertical = this.factory.get_next_generation(vertical);\r\n        corner = this.factory.get_next_generation(corner);\r\n\r\n        let nw = this.factory.create(corner.se, vertical.sw, horizontal.ne, center.nw);\r\n        let ne = this.factory.create(vertical.se, corner.sw, center.ne, horizontal.nw);\r\n        let sw = this.factory.create(horizontal.se, center.sw, corner.ne, vertical.nw);\r\n        let se = this.factory.create(center.se, horizontal.sw, vertical.ne, corner.nw);\r\n\r\n        return this.factory.create(nw, ne, sw, se);\r\n    }\r\n\r\n    update_buffer(new_root, old_root) {\r\n        // this.construct_buffer();\r\n        this.draw_recursive(new_root, old_root, this.buffer, this.shape, 0, this.shape[0], 0, this.shape[1]);\r\n    }\r\n\r\n    draw_recursive(node, old, buffer, shape, xstart, xend, ystart, yend, xoff=0, yoff=0) {\r\n        if (node === old) {\r\n            return;\r\n        }\r\n        // determine which rects to draw to\r\n        let offset = 1 << (node.level-1);\r\n        let dim = 1 << node.level;\r\n        // console.log(`level=${node.level}, xoff=${xoff}, yoff=${yoff}, x=${xstart}...${xend}, y=${ystart}...${yend}`);\r\n        // ignore\r\n        if (xstart >= dim || ystart >= dim || xend < 0 || yend < 0) {\r\n            return;\r\n        }\r\n        // at base case we expect (x, y) of where to draw the pixel\r\n        // xtart, ystart, xend, yend determine where we write to the buffer\r\n        if (node.level === 0) {\r\n            let state = node.population > 0 ? 255 : 0;\r\n            buffer[(xoff+xstart) + (yoff+ystart)*shape[0]] = state;\r\n            return;\r\n        }\r\n\r\n        this.draw_recursive(node.nw, old.nw, buffer, shape, xstart               , min(xend, offset-1), ystart               , min(yend, offset-1), xoff       , yoff);\r\n        this.draw_recursive(node.ne, old.ne, buffer, shape, max(0, xstart-offset), xend-offset        , ystart               , min(yend, offset-1), xoff+offset, yoff);\r\n        this.draw_recursive(node.sw, old.sw, buffer, shape, xstart               , min(xend, offset-1), max(0, ystart-offset), yend-offset        , xoff       , yoff+offset);\r\n        this.draw_recursive(node.se, old.se, buffer, shape, max(0, xstart-offset), xend-offset        , max(0, ystart-offset), yend-offset        , xoff+offset, yoff+offset);\r\n    }\r\n}\r\n\r\nfunction min(x, y) {\r\n    if (x >= y) return y;\r\n    return x;\r\n}\r\n\r\nfunction max(x, y) {\r\n    if (x >= y) return x;\r\n    return y;\r\n}","import { Shader } from '../gl/Shader';\r\nimport { VertexBufferObject, VertexArrayObject, VertexBufferLayout } from '../gl/VertexBuffer';\r\nimport { Uniform } from '../gl/Uniform';\r\nimport { IndexBuffer } from '../gl/IndexBuffer';\r\n\r\nimport basic_shader from '../shaders/basic';\r\nimport { Renderer } from '../gl/Renderer';\r\nimport { GridRender } from './GridRender';\r\nimport { Simulation } from '../hashlife/Simulation';\r\n\r\nconst quad = {\r\n    vertex_data: new Float32Array([\r\n        -1, -1, \r\n        -1,  1,\r\n            1, -1,\r\n            1,  1\r\n    ]),\r\n    index_data: new Uint32Array([\r\n        0, 3, 1,\r\n        0, 2, 3,\r\n    ])\r\n};\r\n\r\nexport class App {\r\n    constructor(gl, size, compressed) {\r\n        this.gl = gl;\r\n\r\n        this.renderer = new Renderer(gl);\r\n        this.shader = new Shader(gl, basic_shader.vertex, basic_shader.frag);\r\n        this.shader.add_uniform('uDataTexture', new Uniform(loc => gl.uniform1i(loc, 0)));\r\n\r\n        this.vbo = new VertexBufferObject(gl, quad.vertex_data, gl.STATIC_DRAW);\r\n        this.ibo = new IndexBuffer(gl, quad.index_data);\r\n        \r\n        let layout = new VertexBufferLayout(gl);\r\n        layout.push_attribute(0, 2, gl.FLOAT, false);\r\n\r\n        this.vao = new VertexArrayObject(gl);\r\n        this.vao.add_vertex_buffer(this.vbo, layout);\r\n\r\n        // this.sim = new Simulation(10, true);\r\n        this.sim = new Simulation(size, compressed);\r\n        this.grid = new GridRender(gl, this.sim.buffer, this.sim.shape);\r\n\r\n        this.steps = 0;\r\n\r\n        this.listeners = new Set();\r\n    }\r\n\r\n    update_settings(size, compressed) {\r\n        let gl = this.gl;\r\n        this.sim = new Simulation(size, compressed);\r\n        this.grid = new GridRender(gl, this.sim.buffer, this.sim.shape);\r\n    }\r\n\r\n    listen(listener) {\r\n        this.listeners.add(listener);\r\n    }\r\n\r\n    notify() {\r\n        for (let listener of this.listeners) {\r\n            listener({steps: this.steps, nodes: this.sim.factory.count});\r\n        }\r\n    }\r\n\r\n\r\n    run() {\r\n        requestAnimationFrame(this.loop.bind(this));\r\n    }\r\n\r\n    loop() {\r\n        this.on_update();\r\n        this.on_render();\r\n        requestAnimationFrame(this.loop.bind(this));\r\n    }\r\n\r\n    on_update() {\r\n        if (this.running) {\r\n            this.step();\r\n        }\r\n    }\r\n\r\n    step() {\r\n        this.sim.step();\r\n        this.steps += 1;\r\n        this.grid.refresh();\r\n        this.notify();\r\n    }\r\n\r\n    clear(xstart, xend, ystart, yend) {\r\n        [xstart, ystart] = this.sim.map_relative_to_abs_coords(xstart, ystart); \r\n        [xend, yend] = this.sim.map_relative_to_abs_coords(xend, yend); \r\n        this.sim.clear(xstart, xend, ystart, yend);\r\n        this.steps = 0;\r\n        this.grid.refresh();\r\n        this.notify();\r\n    }\r\n\r\n    randomise(xstart, xend, ystart, yend) {\r\n        [xstart, ystart] = this.sim.map_relative_to_abs_coords(xstart, ystart); \r\n        [xend, yend] = this.sim.map_relative_to_abs_coords(xend, yend); \r\n        this.sim.randomise(xstart, xend, ystart, yend);\r\n        this.grid.refresh();\r\n        this.notify();\r\n    }\r\n\r\n    on_render() {\r\n        this.shader.bind();\r\n        this.vao.bind();\r\n        this.ibo.bind();\r\n        this.grid.bind();\r\n\r\n        this.renderer.clear();\r\n        this.renderer.draw(this.vao, this.ibo, this.shader);\r\n        // gl.drawElements(gl.TRIANGLES, this.ibo.count, gl.UNSIGNED_INT, 0);\r\n    }\r\n}\r\n\r\n","import React, { createRef } from 'react';\r\nimport { App } from './app/App';\r\nimport { vec2 } from 'gl-matrix';\r\nimport \"./AppView.css\";\r\n\r\nexport class AppView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.ref = createRef();\r\n    this.state = {\r\n      failed_webgl: false,\r\n      running: false,\r\n      nodes: 0,\r\n      steps: 0,\r\n      time_compression: true,\r\n      size: 8,\r\n    };\r\n    this.controller = new MouseController();\r\n  }\r\n\r\n  componentDidMount() {\r\n    let canvas = this.ref.current;\r\n    let gl = canvas.getContext('webgl2'); \r\n    if (!gl) {\r\n      this.setState({...this.state, failed_webgl: true});\r\n      return;\r\n    }\r\n\r\n    let app = new App(gl, this.state.size, this.state.time_compression);\r\n    app.run();\r\n    this.is_randomise = false;\r\n    this.is_clear = false;\r\n    this.app = app;\r\n\r\n    this.app.listen((stats) => {\r\n      setTimeout(() => this.on_stats(stats), 0);\r\n    })\r\n\r\n    this.controller.listen_drag(({start, end}) => {\r\n      let xstart = Math.min(start[0], end[0]);\r\n      let xend = Math.max(start[0], end[0]);\r\n      let ystart = Math.min(start[1], end[1]);\r\n      let yend = Math.max(start[1], end[1]);\r\n      if (this.is_randomise) {\r\n        this.app.randomise(xstart, xend, ystart, yend);\r\n      } else if (this.is_clear) {\r\n        this.app.clear(xstart, xend, ystart, yend);\r\n      }\r\n    })\r\n  }  \r\n\r\n  on_stats({steps, nodes}) {\r\n    this.setState({...this.state, steps, nodes});\r\n  }\r\n\r\n  step() {\r\n    this.app.step();\r\n  }\r\n\r\n  toggle() {\r\n    this.app.running = !this.app.running;\r\n    this.setState({...this.state, running:this.app.running});\r\n  }\r\n\r\n  on_mouse_down(ev) {\r\n    this.controller.on_mouse_down(ev);\r\n    switch (ev.button) {\r\n      case 0: \r\n        this.is_randomise = true; \r\n        this.is_clear = false; \r\n        break;\r\n      case 2: \r\n        this.is_randomise = false;\r\n        this.is_clear = true; \r\n        break;\r\n    }\r\n  }\r\n\r\n  on_mouse_move(ev) {\r\n\r\n  }\r\n\r\n  on_mouse_up(ev) {\r\n    this.controller.on_mouse_up(ev);\r\n    this.is_randomise = false;\r\n    this.is_clear = false;\r\n    ev.preventDefault();\r\n  }\r\n\r\n  clear(ev) {\r\n    this.app.clear();\r\n  }\r\n\r\n  randomise(ev) {\r\n    this.app.randomise();\r\n  }\r\n\r\n  render() {\r\n    if (this.state.failed_webgl) {\r\n      return <div>Requires WebGL2 Support</div>\r\n    }\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"fixed\">\r\n          {this.render_controls()}\r\n          {this.render_settings()}\r\n          {this.render_stats()}\r\n        </div>\r\n        <div className=\"flex-item\">\r\n          <canvas className=\"view\" width={1024} height={1024} ref={this.ref}\r\n                  onMouseDown={ev => this.on_mouse_down(ev)}\r\n                  onMouseMove={ev => this.on_mouse_move(ev)}\r\n                  onMouseUp={ev => this.on_mouse_up(ev)}></canvas>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render_controls() {\r\n    return <div>\r\n      <button onClick={ev => this.clear()}>Clear</button>\r\n      {!this.state.running && <button onClick={ev => this.step()}>Step</button>}\r\n      <button onClick={ev => this.toggle()}>{this.state.running ? 'Pause' : 'Resume'}</button>\r\n      <button onClick={ev => this.randomise()}>Randomise</button>\r\n    </div>\r\n  }\r\n\r\n  render_stats() {\r\n    return <div>\r\n      <h3>Stats</h3>\r\n      <div>Steps: {this.state.steps}</div>\r\n      <div>Nodes: {this.state.nodes}</div>\r\n    </div>\r\n  }\r\n\r\n  render_settings() {\r\n    let onSubmit = ev => {\r\n      ev.preventDefault();\r\n      this.app.update_settings(this.state.size, this.state.time_compression);\r\n    }\r\n\r\n    let onCompression = ev => {\r\n      this.setState({...this.state, time_compression: ev.target.checked})\r\n    }\r\n\r\n    let onSize = ev => {\r\n      this.setState({...this.state, size: ev.target.value});\r\n    }\r\n\r\n    return <div>\r\n      <h3>Settings</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <div>\r\n          <label>Time compression</label>\r\n          <input type=\"checkbox\" checked={this.state.time_compression} onChange={onCompression}></input>\r\n        </div>\r\n        <div>\r\n          <label>Depth</label>\r\n          <input type=\"number\" name=\"quantity\" min=\"2\" max=\"10\" value={this.state.size}\r\n            onChange={onSize}></input>\r\n        </div>\r\n        <button type=\"submit\" className=\"button primary small\">Update Settings</button>\r\n      </form>\r\n    </div> \r\n  }\r\n}\r\n\r\nclass MouseController {\r\n  constructor() {\r\n    this.drag_start = vec2.create();\r\n    this.drag_end = vec2.create();\r\n    this.drag_listeners = new Set();\r\n  }\r\n  \r\n  listen_drag(list) {\r\n    this.drag_listeners.add(list);\r\n  }\r\n\r\n  get_position(ev) {\r\n    var rect = ev.target.getBoundingClientRect();\r\n    var x = ev.clientX - rect.left; //x position within the element.\r\n    var y = ev.clientY - rect.top;  //y position within the element.\r\n    return vec2.fromValues(x/rect.width, y/rect.height);\r\n  }\r\n\r\n  on_mouse_down(ev) {\r\n    this.drag_start = this.get_position(ev);\r\n  }\r\n\r\n  on_mouse_up(ev) {\r\n    this.drag_end = this.get_position(ev);\r\n    for (let list of this.drag_listeners) {\r\n      list({start:this.drag_start, end:this.drag_end});\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AppView } from './AppView';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppView/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}